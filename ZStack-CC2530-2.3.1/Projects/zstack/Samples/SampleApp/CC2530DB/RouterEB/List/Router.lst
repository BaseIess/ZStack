###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               16/Sep/2018  16:55:07
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c
#    Command line       =  
#        -f C:\Users\Re\AppData\Local\Temp\EWE100.tmp
#        (C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        -lA
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  English_AUS.1252
#    List file          =  
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\List\Router.lst
#    Object file        =  
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\Router.r51
#
###############################################################################

C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "AF.h"
     60          #include "OSAL.h"
     61          #include "OnBoard.h"
     62          #include "ZGlobals.h"
     63          #include "AF.h"
     64          #include "aps_groups.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          #include "string.h"
     69          
     70          #include "SampleApp.h"
     71          #include "SampleAppHw.h"
     72          
     73          /* HAL */
     74          #include "hal_drivers.h"
     75          #if defined (LCD_SUPPORTED )
     76            #include "hal_lcd.h"
     77          #endif
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_adc.h"
     81          #include "hal_uart.h"
     82          
     83          /*********************************************************************
     84           * MACROS
     85           */
     86          
     87          /*********************************************************************
     88           * CONSTANTS
     89           */
     90          
     91          #if !defined( SAMPLE_APP_PORT )
     92          #define SAMPLE_APP_PORT  0
     93          #endif
     94          
     95          #if !defined( SAMPLE_APP_BAUD )
     96          #define SAMPLE_APP_BAUD  HAL_UART_BR_38400
     97          //#define SAMPLE_APP_BAUD  HAL_UART_BR_115200
     98          #endif
     99          
    100          // When the Rx buf space is less than this threshold, invoke the Rx callback.
    101          #if !defined( SAMPLE_APP_THRESH )
    102          #define SAMPLE_APP_THRESH  64
    103          #endif
    104          
    105          #if !defined( SAMPLE_APP_RX_SZ )
    106          #define SAMPLE_APP_RX_SZ  128
    107          #endif
    108          
    109          #if !defined( SAMPLE_APP_TX_SZ )
    110          #define SAMPLE_APP_TX_SZ  128
    111          #endif
    112          
    113          // Millisecs of idle time after a byte is received before invoking Rx callback.
    114          #if !defined( SAMPLE_APP_IDLE )
    115          #define SAMPLE_APP_IDLE  6
    116          #endif
    117          
    118          // Loopback Rx bytes to Tx for throughput testing.
    119          #if !defined( SAMPLE_APP_LOOPBACK )
    120          #define SAMPLE_APP_LOOPBACK  FALSE
    121          #endif
    122          
    123          // This is the max byte count per OTA message.
    124          #if !defined( SAMPLE_APP_TX_MAX )
    125          #define SAMPLE_APP_TX_MAX  80
    126          #endif
    127          
    128          #define SAMPLE_APP_RSP_CNT  4
    129          
    130          /*********************************************************************
    131           * TYPEDEFS
    132           */
    133          
    134          /*********************************************************************
    135           * GLOBAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          
    139          uint8 SampleApp_TaskID;    // Task ID for internal task/event processing.
    140          
    141          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    142          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
    143          {
    144            SAMPLEAPP_PERIODIC_CLUSTERID,
    145            SAMPLEAPP_FLASH_CLUSTERID,
    146            SAMPLEAPP_CLUSTERID1,
    147            SAMPLEAPP_CLUSTERID2
    148          };
    149          

   \                                 In  segment XDATA_ROM_C, align 1
    150          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    151          {
    152            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    153            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    154            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    155            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    156            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    157            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    158            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    159            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    160            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    161          };
    162          
    163          // This is the Endpoint/Interface description.  It is defined here, but
    164          // filled-in in SampleApp_Init().  Another way to go would be to fill
    165          // in the structure here and make it a "const" (in code space).  The
    166          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    168          

   \                                 In  segment XDATA_ROM_C, align 1
    169          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   14           DB 20
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SampleApp_SimpleDesc
   \   000005   00           DB 0
    170          {
    171            SAMPLEAPP_ENDPOINT,
    172           &SerialApp_TaskID,
    173            (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
    174            noLatencyReqs
    175          };
    176          
    177          /*********************************************************************
    178           * EXTERNAL VARIABLES
    179           */
    180          
    181          typedef struct
    182          {
    183              int temperature;           // -100 degrees C to 200 degrees C
    184              int water_level;           // -50m to 50m
    185              int  flow_rate;   	 // -10000 L/min to 10000 L/min
    186              uint8  PH;   		 // 0 to 14
    187              uint32  salinity;   	 // 0 to 2000000 mg
    188              uint8  batt_level;        // 0 to 100 percent
    189              float GNSS_latitude;         // -85 to 85 decimal degrees
    190              float GNSS_longitude;        // -180 to 180 decimal degrees
    191              
    192              bool sensors_okay;   	 // 1=good, 0=bad
    193              bool node_okay;   		 // 1=good, 0=bad
    194              char error_state[25];    	 // char message, null terminated "\n"
    195           
    196          } data_sensor_outgoing;
    197          
    198          
    199          /*********************************************************************
    200           * EXTERNAL FUNCTIONS
    201           */
    202          
    203          /*********************************************************************
    204           * LOCAL VARIABLES
    205           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          static uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    207                                    // This variable will be received when
    208                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    210          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          afAddrType_t SampleApp_Broadcast;
   \                     SampleApp_Broadcast:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    216          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    218          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    221          
    222          static afAddrType_t SampleApp_TxAddr;
    223          static uint8 SampleApp_TxSeq;
    224          static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    225          static uint8 SampleApp_TxLen;
   \                     SampleApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    226          
    227          static afAddrType_t SampleApp_RxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    228          static uint8 SampleApp_RxSeq;
   \                     SampleApp_RxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    229          static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
    230          
    231          /*********************************************************************
    232           * LOCAL FUNCTIONS
    233           */
    234          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    235          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    236          void SampleApp_SendPeriodicMessage( void );
    237          void SampleApp_SendFlashMessage( uint16 flashTime );
    238          
    239          static void SampleApp_CallBack(uint8 port, uint8 event);
    240          
    241          /*********************************************************************
    242           * NETWORK LAYER CALLBACKS
    243           */
    244          
    245          /*********************************************************************
    246           * PUBLIC FUNCTIONS
    247           */
    248          
    249          /*********************************************************************
    250           * @fn      SampleApp_Init
    251           *
    252           * @brief   Initialization function for the Generic App Task.
    253           *          This is called during initialization and should contain
    254           *          any application specific initialization (ie. hardware
    255           *          initialization/setup, table initialization, power up
    256           *          notificaiton ... ).
    257           *
    258           * @param   task_id - the ID assigned by OSAL.  This ID should be
    259           *                    used to send messages and set timers.
    260           *
    261           * @return  none
    262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    264          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    265            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX      @DPTR,A
    266            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV       DPTR,#SampleApp_NwkState
   \   000013   7401         MOV       A,#0x1
   \   000015   F0           MOVX      @DPTR,A
    267            SampleApp_TransID = 0;
   \   000016   90....       MOV       DPTR,#SampleApp_TransID
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
    268          
    269            // Device hardware initialization can be added here or in main() (Zmain.c).
    270            // If the hardware is application specific - add it here.
    271            // If the hardware is other parts of the device add it in main().
    272          
    273           #if defined ( BUILD_ALL_DEVICES )
    274            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    275            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    276            // together - if they are - we will start up a coordinator. Otherwise,
    277            // the device will start as a router.
    278            if ( readCoordinatorJumper() )
    279              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    280            else
    281              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    282          #endif // BUILD_ALL_DEVICES
    283          
    284          #if defined ( HOLD_AUTO_START )
    285            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    286            //  from starting the device and wait for the application to
    287            //  start the device.
    288            ZDOInitDevice(0);
    289          #endif
    290          
    291            // Setup for the periodic message's destination address
    292            // Broadcast to everyone
    293            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001B   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00001E   740F         MOV       A,#0xf
   \   000020   F0           MOVX      @DPTR,A
    294            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000021   A3           INC       DPTR
   \   000022   7414         MOV       A,#0x14
   \   000024   F0           MOVX      @DPTR,A
    295            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000025   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
    296          
    297            // Setup for the flash command's destination address - Group 1
    298            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00002D   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
    299            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000033   A3           INC       DPTR
   \   000034   7414         MOV       A,#0x14
   \   000036   F0           MOVX      @DPTR,A
    300            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000037   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003A   12....       LCALL     ?Subroutine1 & 0xFFFF
    301            
    302            SampleApp_Broadcast.addrMode = (afAddrMode_t)AddrBroadcast;
   \                     ??CrossCallReturnLabel_14:
   \   00003D   90....       MOV       DPTR,#SampleApp_Broadcast + 8
   \   000040   740F         MOV       A,#0xf
   \   000042   F0           MOVX      @DPTR,A
    303            SampleApp_Broadcast.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   A3           INC       DPTR
   \   000044   7414         MOV       A,#0x14
   \   000046   F0           MOVX      @DPTR,A
    304            SampleApp_Broadcast.addr.shortAddr = 0xFFFF;
   \   000047   90....       MOV       DPTR,#SampleApp_Broadcast
   \   00004A   74FF         MOV       A,#-0x1
   \   00004C   F0           MOVX      @DPTR,A
   \   00004D   A3           INC       DPTR
   \   00004E   F0           MOVX      @DPTR,A
    305          
    306            // Fill out the endpoint description.
    307            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00004F   90....       MOV       DPTR,#SampleApp_epDesc
   \   000052   7414         MOV       A,#0x14
   \   000054   F0           MOVX      @DPTR,A
    308            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000055   A3           INC       DPTR
   \   000056   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   000058   F0           MOVX      @DPTR,A
   \   000059   A3           INC       DPTR
   \   00005A   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005C   F0           MOVX      @DPTR,A
    309            SampleApp_epDesc.simpleDesc
    310                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00005D   A3           INC       DPTR
   \   00005E   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000060   F0           MOVX      @DPTR,A
   \   000061   A3           INC       DPTR
   \   000062   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000064   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    311            SampleApp_epDesc.latencyReq = noLatencyReqs;
    312          
    313            // Register the endpoint description with the AF
    314            afRegister( &SampleApp_epDesc );
   \                     ??CrossCallReturnLabel_9:
   \   000067                ; Setup parameters for call to function afRegister
   \   000067   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   000069   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00006B   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    315          
    316            // Register for all key events - This app will handle all key events
    317            RegisterForKeys( SampleApp_TaskID );
   \   00006E                ; Setup parameters for call to function RegisterForKeys
   \   00006E   90....       MOV       DPTR,#SampleApp_TaskID
   \   000071   E0           MOVX      A,@DPTR
   \   000072   F9           MOV       R1,A
   \   000073   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    318          
    319            // By default, all devices start out in Group 1
    320            SampleApp_Group.ID = 0x0001;
   \   000076   90....       MOV       DPTR,#SampleApp_Group
   \   000079   12....       LCALL     ?Subroutine1 & 0xFFFF
    321            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \                     ??CrossCallReturnLabel_15:
   \   00007C                ; Setup parameters for call to function osal_memcpy
   \   00007C   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   00007F   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000082   F5..         MOV       ?V2,A
   \   000084   78..         MOV       R0,#?V0
   \   000086   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   000089   7C07         MOV       R4,#0x7
   \   00008B   7D00         MOV       R5,#0x0
   \   00008D   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   00008F   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000091   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000094   7403         MOV       A,#0x3
   \   000096   12....       LCALL     ?DEALLOC_XSTACK8
    322            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   000099                ; Setup parameters for call to function aps_AddGroup
   \   000099   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00009B   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00009D   7914         MOV       R1,#0x14
   \   00009F   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    323            
    324            // Serial initialization start 
    325            halUARTCfg_t uartConfig;
    326          
    327            SampleApp_TaskID = task_id;
   \   0000A2   EE           MOV       A,R6
   \   0000A3   90....       MOV       DPTR,#SampleApp_TaskID
   \   0000A6   F0           MOVX      @DPTR,A
    328            SampleApp_RxSeq = 0xC3;
   \   0000A7   90....       MOV       DPTR,#SampleApp_RxSeq
   \   0000AA   74C3         MOV       A,#-0x3d
   \   0000AC   F0           MOVX      @DPTR,A
    329          
    330            afRegister( (endPointDesc_t *)&SampleApp_epDesc );
   \   0000AD                ; Setup parameters for call to function afRegister
   \   0000AD   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   0000AF   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000B1   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
    331          
    332            RegisterForKeys( task_id );
   \   0000B4                ; Setup parameters for call to function RegisterForKeys
   \   0000B4   EE           MOV       A,R6
   \   0000B5   F9           MOV       R1,A
   \   0000B6   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    333          
    334            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   0000B9   85..82       MOV       DPL,?XSP + 0
   \   0000BC   85..83       MOV       DPH,?XSP + 1
   \   0000BF   7401         MOV       A,#0x1
   \   0000C1   F0           MOVX      @DPTR,A
    335            uartConfig.baudRate             = SAMPLE_APP_BAUD;
   \   0000C2   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C5   7402         MOV       A,#0x2
   \   0000C7   F0           MOVX      @DPTR,A
    336            uartConfig.flowControl          = TRUE;
   \   0000C8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000CB   7401         MOV       A,#0x1
   \   0000CD   F0           MOVX      @DPTR,A
    337            uartConfig.flowControlThreshold = SAMPLE_APP_THRESH; // 2x30 don't care - see uart driver.
   \   0000CE   7403         MOV       A,#0x3
   \   0000D0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D3   7440         MOV       A,#0x40
   \   0000D5   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    338            uartConfig.rx.maxBufSize        = SAMPLE_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \                     ??CrossCallReturnLabel_10:
   \   0000D8   740A         MOV       A,#0xa
   \   0000DA   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DD   7480         MOV       A,#-0x80
   \   0000DF   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    339            uartConfig.tx.maxBufSize        = SAMPLE_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \                     ??CrossCallReturnLabel_11:
   \   0000E2   7412         MOV       A,#0x12
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   7480         MOV       A,#-0x80
   \   0000E9   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    340            uartConfig.idleTimeout          = SAMPLE_APP_IDLE;   // 2x30 don't care - see uart driver.
   \                     ??CrossCallReturnLabel_12:
   \   0000EC   7405         MOV       A,#0x5
   \   0000EE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F1   7406         MOV       A,#0x6
   \   0000F3   F0           MOVX      @DPTR,A
    341            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   0000F4   7416         MOV       A,#0x16
   \   0000F6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F9   7401         MOV       A,#0x1
   \   0000FB   F0           MOVX      @DPTR,A
    342            uartConfig.callBackFunc         = SampleApp_CallBack;
   \   0000FC   741B         MOV       A,#0x1b
   \   0000FE   12....       LCALL     ?XSTACK_DISP0_8
   \   000101   74..         MOV       A,#`??SampleApp_CallBack::?relay` & 0xff
   \   000103   F0           MOVX      @DPTR,A
   \   000104   A3           INC       DPTR
   \   000105   74..         MOV       A,#(`??SampleApp_CallBack::?relay` >> 8) & 0xff
   \   000107   F0           MOVX      @DPTR,A
    343            HalUARTOpen (SAMPLE_APP_PORT, &uartConfig);
   \   000108                ; Setup parameters for call to function HalUARTOpen
   \   000108   AA..         MOV       R2,?XSP + 0
   \   00010A   AB..         MOV       R3,?XSP + 1
   \   00010C   7900         MOV       R1,#0x0
   \   00010E   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    344            // Serial Initialization end
    345          
    346          #if defined ( LCD_SUPPORTED )
    347            HalLcdWriteString( "SerialApp+Labs", HAL_LCD_LINE_1 );
   \   000111                ; Setup parameters for call to function HalLcdWriteString
   \   000111   7901         MOV       R1,#0x1
   \   000113   7A..         MOV       R2,#`?<Constant "SerialApp+Labs">` & 0xff
   \   000115   7B..         MOV       R3,#(`?<Constant "SerialApp+Labs">` >> 8) & 0xff
   \   000117   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    348          #endif
    349          }
   \   00011A   741D         MOV       A,#0x1d
   \   00011C   12....       LCALL     ?DEALLOC_XSTACK8
   \   00011F   7F03         MOV       R7,#0x3
   \   000121   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7401         MOV       A,#0x1
   \   000002                REQUIRE ??Subroutine5_0
   \   000002                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001   A3           INC       DPTR
   \   000002   E4           CLR       A
   \   000003   F0           MOVX      @DPTR,A
   \   000004   22           RET
    350          
    351          /*********************************************************************
    352           * @fn      SampleApp_ProcessEvent
    353           *
    354           * @brief   Generic Application Task event processor.  This function
    355           *          is called to process all events for the task.  Events
    356           *          include timers, messages and any other user defined events.
    357           *
    358           * @param   task_id  - The OSAL assigned task ID.
    359           * @param   events - events to process.  This is a bit map and can
    360           *                   contain more than one event.
    361           *
    362           * @return  none
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    365          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    366            afIncomingMSGPacket_t *MSGpkt;
    367            (void)task_id;  // Intentionally unreferenced parameter
    368          
    369            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   6078         JZ        ??SampleApp_ProcessEvent_0
    370            {
    371              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP      ??SampleApp_ProcessEvent_1
    372              while ( MSGpkt )
    373              {
    374                switch ( MSGpkt->hdr.event )
    375                {
    376                  // Received when a key is pressed
    377                  case KEY_CHANGE:
    378                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    379                    break;
    380          
    381                  // Received when a messages is received (OTA) for this endpoint
    382                  case AF_INCOMING_MSG_CMD:
    383                    SampleApp_MessageMSGCB( MSGpkt );
    384                    break;
    385          
    386                  // Received whenever the device changes state in the network
    387                  case ZDO_STATE_CHANGE:
    388                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   90....       MOV       DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX      @DPTR,A
    389                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    390                        || (SampleApp_NwkState == DEV_ROUTER)
    391                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL       A,#0x9
   \   000017   600A         JZ        ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6407         XRL       A,#0x7
   \   00001C   6005         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6406         XRL       A,#0x6
   \   000021   7010         JNZ       ??SampleApp_ProcessEvent_4
    392                    {
    393                      // Start sending the periodic message in a regular interval.
    394                      osal_start_timerEx( SampleApp_TaskID,
    395                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    396                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7C88         MOV       R4,#-0x78
   \   000025   7D13         MOV       R5,#0x13
   \   000027   7A01         MOV       R2,#0x1
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   90....       MOV       DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    397                    }
    398                    else
    399                    {
    400                      // Device is no longer in the network
    401                    }
    402                    break;
    403          
    404                  default:
    405                    break;
    406                }
    407          
    408                // Release the memory
    409                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    410          
    411                // Next - if one is available
    412                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV       DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000042   8A..         MOV       ?V0,R2
   \   000044   8B..         MOV       ?V1,R3
   \   000046   E5..         MOV       A,?V0
   \   000048   45..         ORL       A,?V1
   \   00004A   6032         JZ        ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   24E6         ADD       A,#-0x1a
   \   000055   601E         JZ        ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD       A,#0x5a
   \   000059   6006         JZ        ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD       A,#-0x11
   \   00005D   60B0         JZ        ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FA           MOV       R2,A
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000073   80BE         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV       R2,?V0
   \   000077   AB..         MOV       R3,?V1
   \   000079   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   00007C   80B5         SJMP      ??SampleApp_ProcessEvent_4
    413              }
    414              
    415              
    416          
    417              // return unprocessed events
    418              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   6480         XRL       A,#0x80
   \   000083   8024         SJMP      ??SampleApp_ProcessEvent_8
    419            }
    420          
    421            // Send a message out - This event is generated by a timer
    422            //  (setup in SampleApp_Init()).
    423            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000085   EA           MOV       A,R2
   \   000086   A2E0         MOV       C,0xE0 /* A   */.0
   \   000088   5022         JNC       ??SampleApp_ProcessEvent_9
    424            {
    425              // Send the periodic message
    426              SampleApp_SendPeriodicMessage();
   \   00008A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008A   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    427          
    428              // Setup to send message again in normal period (+ a little jitter)
    429              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    430                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008D                ; Setup parameters for call to function osal_rand
   \   00008D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000090                ; Setup parameters for call to function osal_start_timerEx
   \   000090   EA           MOV       A,R2
   \   000091   2488         ADD       A,#-0x78
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   3413         ADDC      A,#0x13
   \   000097   FD           MOV       R5,A
   \   000098   7A01         MOV       R2,#0x1
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   90....       MOV       DPTR,#SampleApp_TaskID
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    431          
    432              // return unprocessed events
    433              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A4   EE           MOV       A,R6
   \   0000A5   6401         XRL       A,#0x1
   \   0000A7   FA           MOV       R2,A
   \   0000A8   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000A9   FB           MOV       R3,A
   \   0000AA   8004         SJMP      ??SampleApp_ProcessEvent_10
    434            }
    435          
    436            // Discard unknown events
    437            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AC   7A00         MOV       R2,#0x0
   \   0000AE   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B0   7F04         MOV       R7,#0x4
   \   0000B2   02....       LJMP      ?BANKED_LEAVE_XDATA
    438          }
    439          
    440          /*********************************************************************
    441           * Event Generation Functions
    442           */
    443          /*********************************************************************
    444           * @fn      SampleApp_HandleKeys
    445           *
    446           * @brief   Handles all key events for this device.
    447           *
    448           * @param   shift - true if in shift/alt.
    449           * @param   keys - bit field for key events. Valid entries:
    450           *                 HAL_KEY_SW_2
    451           *                 HAL_KEY_SW_1
    452           *
    453           * @return  none
    454           */
    455          
    456          typedef struct
    457          {
    458            uint8 testData1;
    459            uint8 testData2;
    460            uint16 testData3;
    461            char text[10];
    462          } dataToSend;
    463          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    464          char testString[13] = "banana";
   \                     testString:
   \   000000                DS 13
   \   00000D                REQUIRE `?<Initializer for testString>`
   \   00000D                REQUIRE __INIT_XDATA_I
    465          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    466          dataToSend testDummy = {3,5, 11111,"apple"}; //data information
   \                     testDummy:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for testDummy>`
   \   00000E                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    467          int dataSize = sizeof(testDummy); //need size of data
   \                     dataSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for dataSize>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    468          uint8 structToByte[sizeof(testDummy)]; //converting it to byte to send
   \                     structToByte:
   \   000000                DS 14
   \   00000E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    469          uint8 stringToByte[sizeof(testString)];
   \                     stringToByte:
   \   000000                DS 13
   \   00000D                REQUIRE __INIT_XDATA_Z
    470          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    472          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV       A,#-0x1
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
    473            
    474            
    475            if ( keys & HAL_KEY_SW_1 )
   \   00000C   A2E0         MOV       C,0xE0 /* A   */.0
   \   00000E   505F         JNC       ??SampleApp_HandleKeys_0
    476            {
    477              memcpy(structToByte,&testDummy,dataSize);
   \   000010                ; Setup parameters for call to function memcpy
   \   000010   90....       MOV       DPTR,#dataSize
   \   000013   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000016   7C..         MOV       R4,#testDummy & 0xff
   \   000018   7D..         MOV       R5,#(testDummy >> 8) & 0xff
   \   00001A   7A..         MOV       R2,#structToByte & 0xff
   \   00001C   7B..         MOV       R3,#(structToByte >> 8) & 0xff
   \   00001E   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000021   7402         MOV       A,#0x2
   \   000023   12....       LCALL     ?DEALLOC_XSTACK8
    478              
    479              if (AF_DataRequest( &SampleApp_Broadcast, &SampleApp_epDesc,
    480                                 SAMPLEAPP_CLUSTERID1,
    481                                 5,
    482                                 structToByte,
    483                                 &SampleApp_TransID,
    484                                 AF_DISCV_ROUTE,
    485                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000026                ; Setup parameters for call to function AF_DataRequest
   \   000026   75..1E       MOV       ?V0,#0x1e
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002E   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000031   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000034   78..         MOV       R0,#?V0
   \   000036   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000039   75....       MOV       ?V0,#structToByte & 0xff
   \   00003C   75....       MOV       ?V1,#(structToByte >> 8) & 0xff
   \   00003F   78..         MOV       R0,#?V0
   \   000041   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000044   75..05       MOV       ?V0,#0x5
   \   000047   75..00       MOV       ?V1,#0x0
   \   00004A   78..         MOV       R0,#?V0
   \   00004C   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004F   75..03       MOV       ?V0,#0x3
   \   000052   78..         MOV       R0,#?V0
   \   000054   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000057   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00005A   12....       LCALL     ?DEALLOC_XSTACK8
   \   00005D   E9           MOV       A,R1
   \   00005E   7901         MOV       R1,#0x1
   \   000060   7006         JNZ       ??SampleApp_HandleKeys_1
    486              {
    487                HalLcdWriteString("Up: Sent", HAL_LCD_LINE_1);
   \   000062                ; Setup parameters for call to function HalLcdWriteString
   \   000062   7A..         MOV       R2,#`?<Constant "Up: Sent">` & 0xff
   \   000064   7B..         MOV       R3,#(`?<Constant "Up: Sent">` >> 8) & 0xff
   \   000066   8004         SJMP      ??SampleApp_HandleKeys_2
    488                    
    489              }
    490              else
    491              {
    492                HalLcdWriteString("Up: Not Sent", HAL_LCD_LINE_1);
   \                     ??SampleApp_HandleKeys_1:
   \   000068                ; Setup parameters for call to function HalLcdWriteString
   \   000068   7A..         MOV       R2,#`?<Constant "Up: Not Sent">` & 0xff
   \   00006A   7B..         MOV       R3,#(`?<Constant "Up: Not Sent">` >> 8) & 0xff
   \                     ??SampleApp_HandleKeys_2:
   \   00006C   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    493              }
    494            }
    495          
    496            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   00006F   EE           MOV       A,R6
   \   000070   A2E1         MOV       C,0xE0 /* A   */.1
   \   000072   5052         JNC       ??SampleApp_HandleKeys_3
    497            {
    498              uint8 random = 5;
   \   000074   85..82       MOV       DPL,?XSP + 0
   \   000077   85..83       MOV       DPH,?XSP + 1
   \   00007A   7405         MOV       A,#0x5
   \   00007C   12....       LCALL     ??Subroutine6_0 & 0xFFFF
    499              
    500              if (AF_DataRequest( &SampleApp_Broadcast, &SampleApp_epDesc,
    501                                 SAMPLEAPP_CLUSTERID1,
    502                                 5,
    503                                 &random,
    504                                 &SampleApp_TransID,
    505                                 AF_DISCV_ROUTE,
    506                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_18:
   \   00007F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000082   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000085   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000088   78..         MOV       R0,#?V0
   \   00008A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00008D   7403         MOV       A,#0x3
   \   00008F   12....       LCALL     ?XSTACK_DISP100_8
   \   000092   88..         MOV       ?V0,R0
   \   000094   89..         MOV       ?V1,R1
   \   000096   78..         MOV       R0,#?V0
   \   000098   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00009B   75..05       MOV       ?V0,#0x5
   \   00009E   75..00       MOV       ?V1,#0x0
   \   0000A1   78..         MOV       R0,#?V0
   \   0000A3   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000A6   75..03       MOV       ?V0,#0x3
   \   0000A9   78..         MOV       R0,#?V0
   \   0000AB   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000AE   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000B1   12....       LCALL     ?DEALLOC_XSTACK8
   \   0000B4   E9           MOV       A,R1
   \   0000B5   7901         MOV       R1,#0x1
   \   0000B7   7006         JNZ       ??SampleApp_HandleKeys_4
    507              {
    508                HalLcdWriteString("Right: Sent", HAL_LCD_LINE_1);
   \   0000B9                ; Setup parameters for call to function HalLcdWriteString
   \   0000B9   7A..         MOV       R2,#`?<Constant "Right: Sent">` & 0xff
   \   0000BB   7B..         MOV       R3,#(`?<Constant "Right: Sent">` >> 8) & 0xff
   \   0000BD   8004         SJMP      ??SampleApp_HandleKeys_5
    509              }
    510              else
    511              {
    512                HalLcdWriteString("Right: Not Sent", HAL_LCD_LINE_1);
   \                     ??SampleApp_HandleKeys_4:
   \   0000BF                ; Setup parameters for call to function HalLcdWriteString
   \   0000BF   7A..         MOV       R2,#`?<Constant "Right: Not Sent">` & 0xff
   \   0000C1   7B..         MOV       R3,#(`?<Constant "Right: Not Sent">` >> 8) & 0xff
   \                     ??SampleApp_HandleKeys_5:
   \   0000C3   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    513              }
    514            }
    515            
    516            if ( keys & HAL_KEY_SW_3 )
   \                     ??SampleApp_HandleKeys_3:
   \   0000C6   EE           MOV       A,R6
   \   0000C7   A2E4         MOV       C,0xE0 /* A   */.4
   \   0000C9   5041         JNC       ??SampleApp_HandleKeys_6
    517            {
    518              dataSize = sizeof(testDummy);
   \   0000CB   90....       MOV       DPTR,#dataSize
   \   0000CE   740E         MOV       A,#0xe
   \   0000D0   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    519              int dataSize2 = sizeof(structToByte);
    520              HalLcdWriteStringValue("DummyDataSize", dataSize, 10, HAL_LCD_LINE_1);  
   \                     ??CrossCallReturnLabel_13:
   \   0000D3                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000D3   75..01       MOV       ?V0,#0x1
   \   0000D6   78..         MOV       R0,#?V0
   \   0000D8   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DB   790A         MOV       R1,#0xa
   \   0000DD   7C0E         MOV       R4,#0xe
   \   0000DF   7D00         MOV       R5,#0x0
   \   0000E1   7A..         MOV       R2,#`?<Constant "DummyDataSize">` & 0xff
   \   0000E3   7B..         MOV       R3,#(`?<Constant "DummyDataSize">` >> 8) & 0xff
   \   0000E5   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E8   12....       LCALL     ?DEALLOC_XSTACK8
    521              HalLcdWriteStringValue("ByteDataSize", dataSize2, 10, HAL_LCD_LINE_2);  
   \   0000EB                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000EB   75..02       MOV       ?V0,#0x2
   \   0000EE   78..         MOV       R0,#?V0
   \   0000F0   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F3   790A         MOV       R1,#0xa
   \   0000F5   7C0E         MOV       R4,#0xe
   \   0000F7   7D00         MOV       R5,#0x0
   \   0000F9   7A..         MOV       R2,#`?<Constant "ByteDataSize">` & 0xff
   \   0000FB   7B..         MOV       R3,#(`?<Constant "ByteDataSize">` >> 8) & 0xff
   \   0000FD   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000100   12....       LCALL     ?DEALLOC_XSTACK8
    522              HalLcdWriteString(testDummy.text, HAL_LCD_LINE_3);     
   \   000103                ; Setup parameters for call to function HalLcdWriteString
   \   000103   7903         MOV       R1,#0x3
   \   000105   7A..         MOV       R2,#(testDummy + 4) & 0xff
   \   000107   7B..         MOV       R3,#((testDummy + 4) >> 8) & 0xff
   \   000109   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    523            }
    524            
    525            if ( keys & HAL_KEY_SW_4 )
   \                     ??SampleApp_HandleKeys_6:
   \   00010C   EE           MOV       A,R6
   \   00010D   A2E3         MOV       C,0xE0 /* A   */.3
   \   00010F   507C         JNC       ??SampleApp_HandleKeys_7
    526            {
    527              int stringSize = sizeof(testString);    
    528              HalLcdWriteStringValue("StringSize", stringSize, 10, HAL_LCD_LINE_2);  
   \   000111                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000111   75..02       MOV       ?V0,#0x2
   \   000114   78..         MOV       R0,#?V0
   \   000116   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000119   790A         MOV       R1,#0xa
   \   00011B   7C0D         MOV       R4,#0xd
   \   00011D   7D00         MOV       R5,#0x0
   \   00011F   7A..         MOV       R2,#`?<Constant "StringSize">` & 0xff
   \   000121   7B..         MOV       R3,#(`?<Constant "StringSize">` >> 8) & 0xff
   \   000123   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000126   12....       LCALL     ?DEALLOC_XSTACK8
    529              memcpy(stringToByte,&testString,stringSize);
   \   000129                ; Setup parameters for call to function memcpy
   \   000129   75..0D       MOV       ?V0,#0xd
   \   00012C   75..00       MOV       ?V1,#0x0
   \   00012F   78..         MOV       R0,#?V0
   \   000131   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000134   7C..         MOV       R4,#testString & 0xff
   \   000136   7D..         MOV       R5,#(testString >> 8) & 0xff
   \   000138   7A..         MOV       R2,#stringToByte & 0xff
   \   00013A   7B..         MOV       R3,#(stringToByte >> 8) & 0xff
   \   00013C   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   00013F   7402         MOV       A,#0x2
   \   000141   12....       LCALL     ?DEALLOC_XSTACK8
    530              
    531              if (AF_DataRequest( &SampleApp_Broadcast, &SampleApp_epDesc,
    532                                 SAMPLEAPP_CLUSTERID1,
    533                                 5,
    534                                 stringToByte,
    535                                 &SampleApp_TransID,
    536                                 AF_DISCV_ROUTE,
    537                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000144                ; Setup parameters for call to function AF_DataRequest
   \   000144   75..1E       MOV       ?V0,#0x1e
   \   000147   78..         MOV       R0,#?V0
   \   000149   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00014C   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   00014F   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000152   78..         MOV       R0,#?V0
   \   000154   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000157   75....       MOV       ?V0,#stringToByte & 0xff
   \   00015A   75....       MOV       ?V1,#(stringToByte >> 8) & 0xff
   \   00015D   78..         MOV       R0,#?V0
   \   00015F   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000162   75..05       MOV       ?V0,#0x5
   \   000165   75..00       MOV       ?V1,#0x0
   \   000168   78..         MOV       R0,#?V0
   \   00016A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00016D   75..03       MOV       ?V0,#0x3
   \   000170   78..         MOV       R0,#?V0
   \   000172   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000175   12....       LCALL     ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000178   12....       LCALL     ?DEALLOC_XSTACK8
   \   00017B   E9           MOV       A,R1
   \   00017C   7901         MOV       R1,#0x1
   \   00017E   7006         JNZ       ??SampleApp_HandleKeys_8
    538              {
    539                HalLcdWriteString("Left: Sent", HAL_LCD_LINE_1);
   \   000180                ; Setup parameters for call to function HalLcdWriteString
   \   000180   7A..         MOV       R2,#`?<Constant "Left: Sent">` & 0xff
   \   000182   7B..         MOV       R3,#(`?<Constant "Left: Sent">` >> 8) & 0xff
   \   000184   8004         SJMP      ??SampleApp_HandleKeys_9
    540                    
    541              }
    542              else
    543              {
    544                HalLcdWriteString("Left: Not Sent", HAL_LCD_LINE_1);
   \                     ??SampleApp_HandleKeys_8:
   \   000186                ; Setup parameters for call to function HalLcdWriteString
   \   000186   7A..         MOV       R2,#`?<Constant "Left: Not Sent">` & 0xff
   \   000188   7B..         MOV       R3,#(`?<Constant "Left: Not Sent">` >> 8) & 0xff
   \                     ??SampleApp_HandleKeys_9:
   \   00018A   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    545              }
    546            }
    547            
    548          }
   \                     ??SampleApp_HandleKeys_7:
   \   00018D   7401         MOV       A,#0x1
   \   00018F   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001                ; Setup parameters for call to function AF_DataRequest
   \   000001   75..1E       MOV       ?V0,#0x1e
   \   000004   78..         MOV       R0,#?V0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003   7F02         MOV       R7,#0x2
   \   000005   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7920         MOV       R1,#0x20
   \   000002   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000004   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000006   7A..         MOV       R2,#SampleApp_Broadcast & 0xff
   \   000008   7B..         MOV       R3,#(SampleApp_Broadcast >> 8) & 0xff
   \   00000A                REQUIRE ??Subroutine7_0
   \   00000A                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000003   7409         MOV       A,#0x9
   \   000005   22           RET
    549          
    550          /*********************************************************************
    551           * LOCAL FUNCTIONS
    552           */
    553          
    554          /*********************************************************************
    555           * @fn      SampleApp_MessageMSGCB
    556           *
    557           * @brief   Data message processor callback.  This function processes
    558           *          any incoming data - probably from other devices.  So, based
    559           *          on cluster ID, perform the intended action.
    560           *
    561           * @param   none
    562           *
    563           * @return  none
    564           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV       A,#-0x10
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV       A,#-0x5
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   8A82         MOV       DPL,R2
   \   00000C   8B83         MOV       DPH,R3
    567            uint16 flashTime = 1;
    568            
    569            // additional variable
    570            uint8 groupID;
    571            uint16 srcShortAddr;
    572          
    573            uint8 buffer[5];
    574            switch ( pkt->clusterId )
   \   00000E   E582         MOV       A,DPL
   \   000010   2421         ADD       A,#0x21
   \   000012   FE           MOV       R6,A
   \   000013   E4           CLR       A
   \   000014   3583         ADDC      A,DPH
   \   000016   FF           MOV       R7,A
   \   000017   A3           INC       DPTR
   \   000018   A3           INC       DPTR
   \   000019   A3           INC       DPTR
   \   00001A   A3           INC       DPTR
   \   00001B   E0           MOVX      A,@DPTR
   \   00001C   F5..         MOV       ?V0,A
   \   00001E   A3           INC       DPTR
   \   00001F   E0           MOVX      A,@DPTR
   \   000020   F5..         MOV       ?V1,A
   \   000022   78..         MOV       R0,#?V0
   \   000024   12....       LCALL     ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   01           DB        1
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_2
    575            {
    576              case SAMPLEAPP_PERIODIC_CLUSTERID:
    577                break;
    578                
    579              case SAMPLEAPP_CLUSTERID1:
    580                HalLedBlink( HAL_LED_1, 4, 50, 250 );
   \                     ??SampleApp_MessageMSGCB_2:
   \   000030                ; Setup parameters for call to function HalLedBlink
   \   000030   7CFA         MOV       R4,#-0x6
   \   000032   7D00         MOV       R5,#0x0
   \   000034   7B32         MOV       R3,#0x32
   \   000036   7A04         MOV       R2,#0x4
   \   000038   7901         MOV       R1,#0x1
   \   00003A   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    581                
    582                uint8 firstByte;
    583                uint8 secondByte;
    584                
    585                uint8 temperature = pkt->cmd.Data[0];
    586                uint8 water_level = pkt->cmd.Data[1];
   \   00003D   8E82         MOV       DPL,R6
   \   00003F   8F83         MOV       DPH,R7
   \   000041   E0           MOVX      A,@DPTR
   \   000042   F8           MOV       R0,A
   \   000043   A3           INC       DPTR
   \   000044   E0           MOVX      A,@DPTR
   \   000045   F9           MOV       R1,A
   \   000046   E8           MOV       A,R0
   \   000047   FA           MOV       R2,A
   \   000048   E9           MOV       A,R1
   \   000049   FB           MOV       R3,A
   \   00004A   8882         MOV       DPL,R0
   \   00004C   F583         MOV       DPH,A
   \   00004E   A3           INC       DPTR
   \   00004F   E0           MOVX      A,@DPTR
   \   000050   FF           MOV       R7,A
    587                uint8 flow_rate = pkt->cmd.Data[2];
   \   000051   8882         MOV       DPL,R0
   \   000053   8983         MOV       DPH,R1
   \   000055   A3           INC       DPTR
   \   000056   A3           INC       DPTR
   \   000057   E0           MOVX      A,@DPTR
   \   000058   F5..         MOV       ?V0,A
    588                uint8 PH = pkt->cmd.Data[3];
   \   00005A   8882         MOV       DPL,R0
   \   00005C   8983         MOV       DPH,R1
   \   00005E   A3           INC       DPTR
   \   00005F   A3           INC       DPTR
   \   000060   A3           INC       DPTR
   \   000061   E0           MOVX      A,@DPTR
   \   000062   F5..         MOV       ?V1,A
    589                uint8 batt_level = pkt->cmd.Data[4];
   \   000064   8882         MOV       DPL,R0
   \   000066   8983         MOV       DPH,R1
   \   000068   A3           INC       DPTR
   \   000069   A3           INC       DPTR
   \   00006A   A3           INC       DPTR
   \   00006B   A3           INC       DPTR
   \   00006C   E0           MOVX      A,@DPTR
   \   00006D   FE           MOV       R6,A
    590                uint8 node_okay = 1;
    591                
    592                data_sensor_outgoing current_status;
    593                // ",GNSS_latitude:r1r0ft5p6pxb4vwr",
    594                
    595                HalLcdWriteStringValue( ",temperature:", temperature, 16, HAL_LCD_LINE_1);
   \   00006E                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00006E   75..01       MOV       ?V2,#0x1
   \   000071   78..         MOV       R0,#?V2
   \   000073   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000076   7910         MOV       R1,#0x10
   \   000078   8A82         MOV       DPL,R2
   \   00007A   8B83         MOV       DPH,R3
   \   00007C   E0           MOVX      A,@DPTR
   \   00007D   FC           MOV       R4,A
   \   00007E   7D00         MOV       R5,#0x0
   \   000080   7A..         MOV       R2,#`?<Constant ",temperature:">` & 0xff
   \   000082   7B..         MOV       R3,#(`?<Constant ",temperature:">` >> 8) & 0xff
   \   000084   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000087   12....       LCALL     ?DEALLOC_XSTACK8
    596                HalLcdWriteStringValue( ",water_level:", water_level, 16, HAL_LCD_LINE_2);
   \   00008A                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00008A   75..02       MOV       ?V2,#0x2
   \   00008D   78..         MOV       R0,#?V2
   \   00008F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000092   7910         MOV       R1,#0x10
   \   000094   EF           MOV       A,R7
   \   000095   FC           MOV       R4,A
   \   000096   7D00         MOV       R5,#0x0
   \   000098   7A..         MOV       R2,#`?<Constant ",water_level:">` & 0xff
   \   00009A   7B..         MOV       R3,#(`?<Constant ",water_level:">` >> 8) & 0xff
   \   00009C   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00009F   12....       LCALL     ?DEALLOC_XSTACK8
    597                HalLcdWriteStringValue( ",flow_rate:", flow_rate, 16, HAL_LCD_LINE_3);
   \   0000A2                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000A2   75..03       MOV       ?V2,#0x3
   \   0000A5   78..         MOV       R0,#?V2
   \   0000A7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000AA   7910         MOV       R1,#0x10
   \   0000AC   AC..         MOV       R4,?V0
   \   0000AE   7D00         MOV       R5,#0x0
   \   0000B0   7A..         MOV       R2,#`?<Constant ",flow_rate:">` & 0xff
   \   0000B2   7B..         MOV       R3,#(`?<Constant ",flow_rate:">` >> 8) & 0xff
   \   0000B4   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000B7   12....       LCALL     ?DEALLOC_XSTACK8
    598                HalLcdWriteStringValue( ",PH:", PH, 16, HAL_LCD_LINE_1);
   \   0000BA                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000BA   75..01       MOV       ?V0,#0x1
   \   0000BD   78..         MOV       R0,#?V0
   \   0000BF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000C2   7910         MOV       R1,#0x10
   \   0000C4   AC..         MOV       R4,?V1
   \   0000C6   7D00         MOV       R5,#0x0
   \   0000C8   7A..         MOV       R2,#`?<Constant ",PH:">` & 0xff
   \   0000CA   7B..         MOV       R3,#(`?<Constant ",PH:">` >> 8) & 0xff
   \   0000CC   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000CF   12....       LCALL     ?DEALLOC_XSTACK8
    599                HalLcdWriteStringValue( ",batt_level:", batt_level, 16, HAL_LCD_LINE_2);
   \   0000D2                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000D2   75..02       MOV       ?V0,#0x2
   \   0000D5   78..         MOV       R0,#?V0
   \   0000D7   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000DA   7910         MOV       R1,#0x10
   \   0000DC   EE           MOV       A,R6
   \   0000DD   FC           MOV       R4,A
   \   0000DE   7D00         MOV       R5,#0x0
   \   0000E0   7A..         MOV       R2,#`?<Constant ",batt_level:">` & 0xff
   \   0000E2   7B..         MOV       R3,#(`?<Constant ",batt_level:">` >> 8) & 0xff
   \   0000E4   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000E7   12....       LCALL     ?DEALLOC_XSTACK8
    600                HalLcdWriteStringValue( ",node_okay:", node_okay, 16, HAL_LCD_LINE_3);
   \   0000EA                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000EA   75..03       MOV       ?V0,#0x3
   \   0000ED   78..         MOV       R0,#?V0
   \   0000EF   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000F2   7910         MOV       R1,#0x10
   \   0000F4   7C01         MOV       R4,#0x1
   \   0000F6   7D00         MOV       R5,#0x0
   \   0000F8   7A..         MOV       R2,#`?<Constant ",node_okay:">` & 0xff
   \   0000FA   7B..         MOV       R3,#(`?<Constant ",node_okay:">` >> 8) & 0xff
   \   0000FC   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   0000FF   02....       LJMP      ??SampleApp_MessageMSGCB_3 & 0xFFFF
    601                
    602                break;
    603          
    604              case SAMPLEAPP_FLASH_CLUSTERID:
    605                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    606                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   000102   8E82         MOV       DPL,R6
   \   000104   8F83         MOV       DPH,R7
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F8           MOV       R0,A
   \   000108   A3           INC       DPTR
   \   000109   E0           MOVX      A,@DPTR
   \   00010A   F9           MOV       R1,A
   \   00010B                ; Setup parameters for call to function HalLedBlink
   \   00010B   8882         MOV       DPL,R0
   \   00010D   F583         MOV       DPH,A
   \   00010F   A3           INC       DPTR
   \   000110   E0           MOVX      A,@DPTR
   \   000111   FA           MOV       R2,A
   \   000112   8882         MOV       DPL,R0
   \   000114   8983         MOV       DPH,R1
   \   000116   A3           INC       DPTR
   \   000117   A3           INC       DPTR
   \   000118   E0           MOVX      A,@DPTR
   \   000119   F8           MOV       R0,A
   \   00011A   E4           CLR       A
   \   00011B   C8           XCH       A,R0
   \   00011C   F9           MOV       R1,A
   \   00011D   EA           MOV       A,R2
   \   00011E   28           ADD       A,R0
   \   00011F   F5..         MOV       ?V0,A
   \   000121   E4           CLR       A
   \   000122   39           ADDC      A,R1
   \   000123   F5..         MOV       ?V1,A
   \   000125   7402         MOV       A,#0x2
   \   000127   78..         MOV       R0,#?V0
   \   000129   12....       LCALL     ?US_SHR
   \   00012C   AC..         MOV       R4,?V0
   \   00012E   AD..         MOV       R5,?V1
   \   000130   7B32         MOV       R3,#0x32
   \   000132   7A04         MOV       R2,#0x4
   \   000134   7908         MOV       R1,#0x8
   \   000136   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    607          
    608                // added new codes 
    609                //groupIDJinx=BUILD_UINT16(pkt->cmd.Data[0], pkt->cmd.Data[1]);
    610                // extracting application data 
    611                //uint8 firstByte = pkt->cmd.Data[0];
    612                //uint8 secondByte = pkt->cmd.Data[1];
    613                //uint8 thirdByte = pkt->cmd.Data[2];
    614                
    615                uint32 finalValue = 0;
   \   000139   75..00       MOV       ?V0,#0x0
   \   00013C   75..00       MOV       ?V1,#0x0
   \   00013F   75..00       MOV       ?V2,#0x0
   \   000142   75..00       MOV       ?V3,#0x0
    616                //finalValue = BUILD_UINT32(firstByte, secondByte, thirdByte, (uint8)0);
    617                //finalValue = BUILD_UINT32((uint8)0, firstByte, secondByte, thirdByte);
    618                
    619                groupID = pkt->cmd.Data[0];
    620                
    621                if (groupID == 0x05){
   \   000145   8E82         MOV       DPL,R6
   \   000147   8F83         MOV       DPH,R7
   \   000149   E0           MOVX      A,@DPTR
   \   00014A   F8           MOV       R0,A
   \   00014B   A3           INC       DPTR
   \   00014C   E0           MOVX      A,@DPTR
   \   00014D   F583         MOV       DPH,A
   \   00014F   8882         MOV       DPL,R0
   \   000151   E0           MOVX      A,@DPTR
   \   000152   6405         XRL       A,#0x5
   \   000154   6003         JZ        $+5
   \   000156   02....       LJMP      ??SampleApp_MessageMSGCB_4 & 0xFFFF
    622                  // take the first and second byte for the group ID 
    623                  buffer[0] = (uint8)firstByte;
                                            ^
Warning[Pe549]: variable "firstByte" is used before its value is set
   \   000159   85..82       MOV       DPL,?XSP + 0
   \   00015C   85..83       MOV       DPH,?XSP + 1
   \   00015F   E5..         MOV       A,?V4
   \   000161   F0           MOVX      @DPTR,A
    624                  buffer[1] = (uint8)secondByte;
                                            ^
Warning[Pe549]: variable "secondByte" is used before its value is set

        data_sensor_outgoing current_status;
                             ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",592  Warning[Pe177]: 
          variable "current_status" was declared but never referenced

    switch ( pkt->clusterId )
    ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",574  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "temperature" (declared at line 585)
            variable "water_level" (declared at line 586)
            variable "flow_rate" (declared at line 587)
            variable "PH" (declared at line 588)
            variable "batt_level" (declared at line 589)
            variable "node_okay" (declared at line 590)

    uint16 srcShortAddr;
           ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",571  Warning[Pe177]: 
          variable "srcShortAddr" was declared but never referenced
   \   000162   7401         MOV       A,#0x1
   \   000164   12....       LCALL     ?XSTACK_DISP0_8
   \   000167   E5..         MOV       A,?V5
   \   000169   F0           MOVX      @DPTR,A
    625                  // read the adc and pushed it to the buffer 
    626                  uint16 AdcResult = HalAdcRead (HAL_ADC_CHANNEL_7, HAL_ADC_RESOLUTION_14);
   \   00016A                ; Setup parameters for call to function HalAdcRead
   \   00016A   7A04         MOV       R2,#0x4
   \   00016C   7907         MOV       R1,#0x7
   \   00016E   12....       LCALL     `??HalAdcRead::?relay`; Banked call to: HalAdcRead
    627                  buffer[2] = (uint8)AdcResult & 0xFF;
   \   000171   7402         MOV       A,#0x2
   \   000173   12....       LCALL     ?XSTACK_DISP0_8
   \   000176   EA           MOV       A,R2
   \   000177   F0           MOVX      @DPTR,A
    628                  buffer[3] = (uint8)(AdcResult >> 8);
   \   000178   7403         MOV       A,#0x3
   \   00017A   12....       LCALL     ?XSTACK_DISP0_8
   \   00017D   12....       LCALL     ?Subroutine2 & 0xFFFF
    629          
    630                  if (AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    631                                 SAMPLEAPP_FLASH_CLUSTERID,
    632                                 4,
    633                                 buffer,
    634                                 &SampleApp_TransID,
    635                                 AF_DISCV_ROUTE,
    636                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_16:
   \   000180   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000183   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000186   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000189   78..         MOV       R0,#?V0
   \   00018B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00018E   7403         MOV       A,#0x3
   \   000190   12....       LCALL     ?XSTACK_DISP100_8
   \   000193   88..         MOV       ?V0,R0
   \   000195   89..         MOV       ?V1,R1
   \   000197   78..         MOV       R0,#?V0
   \   000199   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00019C   75..04       MOV       ?V0,#0x4
   \   00019F   75..00       MOV       ?V1,#0x0
   \   0001A2   78..         MOV       R0,#?V0
   \   0001A4   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001A7   75..02       MOV       ?V0,#0x2
   \   0001AA   78..         MOV       R0,#?V0
   \   0001AC   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0001AF   7920         MOV       R1,#0x20
   \   0001B1   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   0001B3   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001B5   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   0001B7   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   0001B9   12....       LCALL     ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0001BC   12....       LCALL     ?DEALLOC_XSTACK8
    637                  {
    638                  }
    639                  else
    640                  {
    641                    // Error occurred in request to send.
    642                  }
    643                  
    644                  finalValue = BUILD_UINT32(buffer[0], buffer[1], buffer[2], buffer[3]);
   \   0001BF   85..82       MOV       DPL,?XSP + 0
   \   0001C2   85..83       MOV       DPH,?XSP + 1
   \   0001C5   E0           MOVX      A,@DPTR
   \   0001C6   F5..         MOV       ?V0,A
   \   0001C8   E4           CLR       A
   \   0001C9   04           INC       A
   \   0001CA   12....       LCALL     ?XSTACK_DISP0_8
   \   0001CD   E0           MOVX      A,@DPTR
   \   0001CE   F5..         MOV       ?V4,A
   \   0001D0   E4           CLR       A
   \   0001D1   F5..         MOV       ?V5,A
   \   0001D3   F5..         MOV       ?V6,A
   \   0001D5   F5..         MOV       ?V7,A
   \   0001D7   7408         MOV       A,#0x8
   \   0001D9   78..         MOV       R0,#?V4
   \   0001DB   12....       LCALL     ?L_SHL
   \   0001DE   78..         MOV       R0,#?V0
   \   0001E0   79..         MOV       R1,#?V4
   \   0001E2   12....       LCALL     ?L_ADD
   \   0001E5   7402         MOV       A,#0x2
   \   0001E7   12....       LCALL     ?XSTACK_DISP0_8
   \   0001EA   E0           MOVX      A,@DPTR
   \   0001EB   F5..         MOV       ?V4,A
   \   0001ED   E4           CLR       A
   \   0001EE   F5..         MOV       ?V5,A
   \   0001F0   7410         MOV       A,#0x10
   \   0001F2   78..         MOV       R0,#?V4
   \   0001F4   12....       LCALL     ?L_SHL
   \   0001F7   78..         MOV       R0,#?V0
   \   0001F9   79..         MOV       R1,#?V4
   \   0001FB   12....       LCALL     ?L_ADD
   \   0001FE   7403         MOV       A,#0x3
   \   000200   12....       LCALL     ?XSTACK_DISP0_8
   \   000203   E0           MOVX      A,@DPTR
   \   000204   F5..         MOV       ?V4,A
   \   000206   E4           CLR       A
   \   000207   F5..         MOV       ?V6,A
   \   000209   7418         MOV       A,#0x18
   \   00020B   78..         MOV       R0,#?V4
   \   00020D   12....       LCALL     ?L_SHL
   \   000210   78..         MOV       R0,#?V0
   \   000212   79..         MOV       R1,#?V4
   \   000214   12....       LCALL     ?L_ADD
    645                  HalLcdWriteValue( finalValue , 16, HAL_LCD_LINE_2);
   \   000217                ; Setup parameters for call to function HalLcdWriteValue
   \   000217   75..02       MOV       ?V4,#0x2
   \   00021A   78..         MOV       R0,#?V4
   \   00021C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00021F   7910         MOV       R1,#0x10
   \   000221   AA..         MOV       R2,?V0
   \   000223   AB..         MOV       R3,?V1
   \   000225   AC..         MOV       R4,?V2
   \   000227   AD..         MOV       R5,?V3
   \   000229   12....       LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \   00022C   7401         MOV       A,#0x1
   \   00022E   12....       LCALL     ?DEALLOC_XSTACK8
    646                }
    647                
    648                // srcShortAddr = pkt->srcAddr.addr.shortAddr;
    649                // HalLcdWriteStringValueValue( "R:", srcShortAddr, 16, groupIDJinx, 16, HAL_LCD_LINE_2);
    650                
    651                HalLcdWriteValue( finalValue , 16, HAL_LCD_LINE_3);
   \                     ??SampleApp_MessageMSGCB_4:
   \   000231                ; Setup parameters for call to function HalLcdWriteValue
   \   000231   75..03       MOV       ?V4,#0x3
   \   000234   78..         MOV       R0,#?V4
   \   000236   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000239   7910         MOV       R1,#0x10
   \   00023B   AA..         MOV       R2,?V0
   \   00023D   AB..         MOV       R3,?V1
   \   00023F   AC..         MOV       R4,?V2
   \   000241   AD..         MOV       R5,?V3
   \   000243   12....       LCALL     `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \                     ??SampleApp_MessageMSGCB_3:
   \   000246   7401         MOV       A,#0x1
   \   000248   12....       LCALL     ?DEALLOC_XSTACK8
    652                
    653                // HalLcdWriteStringValueValue( , firstByte, 16, secondByte, 16, HAL_LCD_LINE_3);
    654                break;
    655            }
    656          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   00024B   7405         MOV       A,#0x5
   \   00024D   12....       LCALL     ?DEALLOC_XSTACK8
   \   000250   7F08         MOV       R7,#0x8
   \   000252   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EB           MOV       A,R3
   \   000001                REQUIRE ??Subroutine6_0
   \   000001                ; // Fall through to label ??Subroutine6_0
    657          
    658          /*********************************************************************
    659           * @fn      SampleApp_SendPeriodicMessage
    660           *
    661           * @brief   Send the periodic message.
    662           *
    663           * @param   none
    664           *
    665           * @return  none
    666           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    667          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    668          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    669            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    670                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    671                                 1,
    672                                 (uint8*)&SampleAppPeriodicCounter,
    673                                 &SampleApp_TransID,
    674                                 AF_DISCV_ROUTE,
    675                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV       ?V0,#0x1e
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV       R1,#0x20
   \   000035   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL     ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000040   80..         SJMP      ?Subroutine0
    676            {
    677            }
    678            else
    679            {
    680              // Error occurred in request to send.
    681            }
    682          }
    683          
    684          /*********************************************************************
    685           * @fn      SampleApp_SendFlashMessage
    686           *
    687           * @brief   Send the flash message to group 1.
    688           *
    689           * @param   flashTime - in milliseconds
    690           *
    691           * @return  none
    692           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    693          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    694          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    695            uint8 buffer[3];
    696            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    697            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    698            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   12....       LCALL     ?Subroutine2 & 0xFFFF
    699          
    700            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    701                                 SAMPLEAPP_FLASH_CLUSTERID,
    702                                 3,
    703                                 buffer,
    704                                 &SampleApp_TransID,
    705                                 AF_DISCV_ROUTE,
    706                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_17:
   \   00002A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00002D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000030   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000033   78..         MOV       R0,#?V0
   \   000035   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000038   7403         MOV       A,#0x3
   \   00003A   12....       LCALL     ?XSTACK_DISP100_8
   \   00003D   88..         MOV       ?V0,R0
   \   00003F   89..         MOV       ?V1,R1
   \   000041   78..         MOV       R0,#?V0
   \   000043   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000046   75..03       MOV       ?V0,#0x3
   \   000049   75..00       MOV       ?V1,#0x0
   \   00004C   78..         MOV       R0,#?V0
   \   00004E   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000051   75..02       MOV       ?V0,#0x2
   \   000054   78..         MOV       R0,#?V0
   \   000056   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000059   7920         MOV       R1,#0x20
   \   00005B   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   00005D   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00005F   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000061   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000063   12....       LCALL     ??Subroutine7_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000066   12....       LCALL     ?DEALLOC_XSTACK8
    707            {
    708            }
    709            else
    710            {
    711              // Error occurred in request to send.
    712            }
    713          }
   \   000069   7403         MOV       A,#0x3
   \   00006B                REQUIRE ?Subroutine0
   \   00006B                ; // Fall through to label ?Subroutine0
    714          
    715          /*********************************************************************
    716          *********************************************************************/
    717          
    718          /*********************************************************************
    719           * @fn      SampleApp_CallBack
    720           *
    721           * @brief   Send data OTA.
    722           *
    723           * @param   port - UART port.
    724           * @param   event - the UART port event flag.
    725           *
    726           * @return  none
    727           */
    728          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    729          static void SampleApp_CallBack(uint8 port, uint8 event)
   \                     SampleApp_CallBack:
    730          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 81
   \   000005   74AF         MOV       A,#-0x51
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
    731            (void)port;
    732            uint8 localBuf[81];
    733            uint16 receivedUARTLen;
    734          
    735            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    736          #if SERIAL_APP_LOOPBACK
    737                (SampleApp_TxLen < SERIAL_APP_TX_MAX))
    738          #else
    739                !SampleApp_TxLen)
   \   00000C   7407         MOV       A,#0x7
   \   00000E   5E           ANL       A,R6
   \   00000F   603B         JZ        ??SampleApp_CallBack_0
   \   000011   90....       MOV       DPTR,#SampleApp_TxLen
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7035         JNZ       ??SampleApp_CallBack_0
    740          #endif
    741            {
    742              // buffer needed to be emptied for the new liner
    743              for(int i = 0; i < 81; i++){
    744                localBuf[i] = 0;
   \   000017   E4           CLR       A
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   7851         MOV       R0,#0x51
   \                     ??SampleApp_CallBack_1:
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   D8FC         DJNZ      R0,??SampleApp_CallBack_1
    745              }   
    746              receivedUARTLen= HalUARTRead(SAMPLE_APP_PORT, localBuf, SAMPLE_APP_TX_MAX);
   \   000024                ; Setup parameters for call to function HalUARTRead
   \   000024   7C50         MOV       R4,#0x50
   \   000026   FD           MOV       R5,A
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00002F   8A..         MOV       ?V0,R2
   \   000031   8B..         MOV       ?V1,R3
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
    747              HalLcdWriteStringValue( localBuf,  receivedUARTLen, 16, HAL_LCD_LINE_3 ); 
                                             ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"

  static afAddrType_t SampleApp_TxAddr;
                      ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",222  Warning[Pe177]: 
          variable "SampleApp_TxAddr" was declared but never referenced

  static uint8 SampleApp_TxSeq;
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",223  Warning[Pe177]: 
          variable "SampleApp_TxSeq" was declared but never referenced

  static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",224  Warning[Pe177]: 
          variable "SampleApp_TxBuf" was declared but never referenced

  static afAddrType_t SampleApp_RxAddr;
                      ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",227  Warning[Pe177]: 
          variable "SampleApp_RxAddr" was declared but never referenced

  static uint8 SampleApp_RxSeq;
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",228  Warning[Pe550]: 
          variable "SampleApp_RxSeq" was set but never used

  static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Router.c",229  Warning[Pe177]: 
          variable "SampleApp_RspBuf" was declared but never referenced
   \   000037                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000037   75..03       MOV       ?V0,#0x3
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   7910         MOV       R1,#0x10
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP101_8
   \   000046   12....       LCALL     ?Subroutine3 & 0xFFFF
    748              
    749              
    750              //HalUARTWrite(SAMPLE_APP_PORT, *localBuf, 81);
    751              //SampleApp_Send();
    752            }
   \                     ??CrossCallReturnLabel_8:
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    753          }
   \                     ??SampleApp_CallBack_0:
   \   00004C   7451         MOV       A,#0x51
   \   00004E   80..         SJMP      ?Subroutine0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for testString>`:
   \   000000   62616E61     DB "banana"
   \            6E6100  
   \   000007   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for testDummy>`:
   \   000000   03           DB 3
   \   000001   05           DB 5
   \   000002   672B         DW 11111
   \   000004   6170706C     DB "apple"
   \            6500    
   \   00000A   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for dataSize>`:
   \   000000   0E00         DW 14

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_CallBack::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_CallBack

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SerialApp+Labs">`:
   \   000000   53657269     DB "SerialApp+Labs"
   \            616C4170
   \            702B4C61
   \            627300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Up: Sent">`:
   \   000000   55703A20     DB "Up: Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Up: Not Sent">`:
   \   000000   55703A20     DB "Up: Not Sent"
   \            4E6F7420
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Right: Sent">`:
   \   000000   52696768     DB "Right: Sent"
   \            743A2053
   \            656E7400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Right: Not Sent">`:
   \   000000   52696768     DB "Right: Not Sent"
   \            743A204E
   \            6F742053
   \            656E7400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "DummyDataSize">`:
   \   000000   44756D6D     DB "DummyDataSize"
   \            79446174
   \            6153697A
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ByteDataSize">`:
   \   000000   42797465     DB "ByteDataSize"
   \            44617461
   \            53697A65
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StringSize">`:
   \   000000   53747269     DB "StringSize"
   \            6E675369
   \            7A6500  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Left: Sent">`:
   \   000000   4C656674     DB "Left: Sent"
   \            3A205365
   \            6E7400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Left: Not Sent">`:
   \   000000   4C656674     DB "Left: Not Sent"
   \            3A204E6F
   \            74205365
   \            6E7400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",temperature:">`:
   \   000000   2C74656D     DB ",temperature:"
   \            70657261
   \            74757265
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",water_level:">`:
   \   000000   2C776174     DB ",water_level:"
   \            65725F6C
   \            6576656C
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",flow_rate:">`:
   \   000000   2C666C6F     DB ",flow_rate:"
   \            775F7261
   \            74653A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",PH:">`:
   \   000000   2C50483A     DB ",PH:"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",batt_level:">`:
   \   000000   2C626174     DB ",batt_level:"
   \            745F6C65
   \            76656C3A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",node_okay:">`:
   \   000000   2C6E6F64     DB ",node_okay:"
   \            655F6F6B
   \            61793A00
    754          
    755          
    756          /*********************************************************************
    757          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     92   SampleApp_CallBack
        0     92   -> HalLcdWriteStringValue
        0     91   -> HalUARTRead
      0     32   SampleApp_HandleKeys
        0     20   -> AF_DataRequest
        0     11   -> HalLcdWriteString
        0     12   -> HalLcdWriteStringValue
        0     13   -> memcpy
      0     43   SampleApp_Init
        0     40   -> HalLcdWriteString
        0     40   -> HalUARTOpen
        0     40   -> RegisterForKeys
        0     40   -> afRegister
        0     40   -> aps_AddGroup
        0     43   -> osal_memcpy
      1     42   SampleApp_MessageMSGCB
        0     30   -> AF_DataRequest
        0     21   -> HalAdcRead
        0     22   -> HalLcdWriteStringValue
        0     22   -> HalLcdWriteValue
        0     21   -> HalLedBlink
      0     12   SampleApp_ProcessEvent
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     12   -> osal_start_timerEx
      1     22   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     31   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?<Constant ",PH:">
      13  ?<Constant ",batt_level:">
      12  ?<Constant ",flow_rate:">
      12  ?<Constant ",node_okay:">
      14  ?<Constant ",temperature:">
      14  ?<Constant ",water_level:">
      13  ?<Constant "ByteDataSize">
      14  ?<Constant "DummyDataSize">
       8  ?<Constant "Group 1">
      15  ?<Constant "Left: Not Sent">
      11  ?<Constant "Left: Sent">
      16  ?<Constant "Right: Not Sent">
      12  ?<Constant "Right: Sent">
      15  ?<Constant "SerialApp+Labs">
      11  ?<Constant "StringSize">
      13  ?<Constant "Up: Not Sent">
       9  ?<Constant "Up: Sent">
       2  ?<Initializer for dataSize>
      14  ?<Initializer for testDummy>
      13  ?<Initializer for testString>
       5  ??Subroutine5_0
       7  ??Subroutine6_0
       6  ??Subroutine7_0
       8  ?Subroutine0
       2  ?Subroutine1
       1  ?Subroutine2
       6  ?Subroutine3
      10  ?Subroutine4
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
      12  SampleApp_Broadcast
      80  SampleApp_CallBack
       6  SampleApp_CallBack::?relay
      12  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
     402  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     292  SampleApp_Init
       6  SampleApp_Init::?relay
     597  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     181  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
       1  SampleApp_RxSeq
     107  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      66  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       1  SampleApp_TxLen
       6  SampleApp_epDesc
       1  SerialApp_TaskID
       6  SerialApp_epDesc
       2  dataSize
      13  stringToByte
      14  structToByte
      14  testDummy
      13  testString

 
 1 770 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    29 bytes in segment XDATA_I
    29 bytes in segment XDATA_ID
   237 bytes in segment XDATA_ROM_C
    95 bytes in segment XDATA_Z
 
    71 bytes of CODE     memory
   237 bytes of CONST    memory
 1 770 bytes of HUGECODE memory
   124 bytes of XDATA    memory

Errors: none
Warnings: 12
