///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V10.20.1.5333 for 8051              16/Sep/2018  17:33:12
// Copyright 2004-2018 IAR Systems AB.
// Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
//    Command line       =  
//        -f C:\Users\Re\AppData\Local\Temp\EWC81D.tmp
//        (C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
//        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
//        LCD_SUPPORTED=DEBUG -lC
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
//        -lA
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
//        --diag_suppress Pe001,Pa010 -o
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
//        -e --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 8 -f
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
//        -I
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
//        -Ohz --require_prototypes)
//    Locale             =  English_AUS.1252
//    List file          =  
//        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\Coordinator.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__register_banks", "*"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_Z

        FUNCTION `??SampleApp_CallBack::?relay`,0203H
        PUBLIC `??SampleApp_HandleKeys::?relay`
        FUNCTION `??SampleApp_HandleKeys::?relay`,0203H
        PUBLIC `??SampleApp_Init::?relay`
        FUNCTION `??SampleApp_Init::?relay`,0203H
        PUBLIC `??SampleApp_MessageMSGCB::?relay`
        FUNCTION `??SampleApp_MessageMSGCB::?relay`,0203H
        PUBLIC `??SampleApp_ProcessEvent::?relay`
        FUNCTION `??SampleApp_ProcessEvent::?relay`,0203H
        PUBLIC `??SampleApp_SendFlashMessage::?relay`
        FUNCTION `??SampleApp_SendFlashMessage::?relay`,0203H
        PUBLIC `??SampleApp_SendPeriodicMessage::?relay`
        FUNCTION `??SampleApp_SendPeriodicMessage::?relay`,0203H
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_Broadcast
        FUNCTION SampleApp_CallBack,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 92, STACK
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 26, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
HalLcdWriteString   SYMBOL "HalLcdWriteString"
`??HalLcdWriteString::?relay` SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
`??HalLcdWriteStringValue::?relay` SYMBOL "?relay", HalLcdWriteStringValue
HalUARTOpen         SYMBOL "HalUARTOpen"
`??HalUARTOpen::?relay` SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
`??HalUARTRead::?relay` SYMBOL "?relay", HalUARTRead
RegisterForKeys     SYMBOL "RegisterForKeys"
`??RegisterForKeys::?relay` SYMBOL "?relay", RegisterForKeys
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
aps_AddGroup        SYMBOL "aps_AddGroup"
`??aps_AddGroup::?relay` SYMBOL "?relay", aps_AddGroup
memcpy              SYMBOL "memcpy"
`??memcpy::?relay`  SYMBOL "?relay", memcpy
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_rand           SYMBOL "osal_rand"
`??osal_rand::?relay` SYMBOL "?relay", osal_rand
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
`??SampleApp_HandleKeys::?relay` SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
`??SampleApp_Init::?relay` SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
`??SampleApp_MessageMSGCB::?relay` SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
`??SampleApp_ProcessEvent::?relay` SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
`??SampleApp_SendFlashMessage::?relay` SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
`??SampleApp_SendPeriodicMessage::?relay` SYMBOL "?relay", SampleApp_SendPeriodicMessage

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??HalLcdWriteString::?relay`
        FUNCTION `??HalLcdWriteString::?relay`,00H
        EXTERN `??HalLcdWriteStringValue::?relay`
        FUNCTION `??HalLcdWriteStringValue::?relay`,00H
        EXTERN `??HalUARTOpen::?relay`
        FUNCTION `??HalUARTOpen::?relay`,00H
        EXTERN `??HalUARTRead::?relay`
        FUNCTION `??HalUARTRead::?relay`,00H
        EXTERN `??RegisterForKeys::?relay`
        FUNCTION `??RegisterForKeys::?relay`,00H
        EXTERN `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,00H
        EXTERN `??aps_AddGroup::?relay`
        FUNCTION `??aps_AddGroup::?relay`,00H
        EXTERN `??memcpy::?relay`
        FUNCTION `??memcpy::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_rand::?relay`
        FUNCTION `??osal_rand::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "AF.h"
//   60 #include "OSAL.h"
//   61 #include "OnBoard.h"
//   62 #include "ZGlobals.h"
//   63 #include "AF.h"
//   64 #include "aps_groups.h"
//   65 #include "ZDApp.h"
//   66 #include "ZDObject.h"
//   67 #include "ZDProfile.h"
//   68 #include "string.h"
//   69 
//   70 #include "SampleApp.h"
//   71 #include "SampleAppHw.h"
//   72 
//   73 /* HAL */
//   74 #include "hal_drivers.h"
//   75 #if defined (LCD_SUPPORTED )
//   76   #include "hal_lcd.h"
//   77 #endif
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_adc.h"
//   81 #include "hal_uart.h"
//   82 
//   83 /*********************************************************************
//   84  * MACROS
//   85  */
//   86 
//   87 /*********************************************************************
//   88  * CONSTANTS
//   89  */
//   90 
//   91 #if !defined( SAMPLE_APP_PORT )
//   92 #define SAMPLE_APP_PORT  0
//   93 #endif
//   94 
//   95 #if !defined( SAMPLE_APP_BAUD )
//   96 #define SAMPLE_APP_BAUD  HAL_UART_BR_38400
//   97 //#define SAMPLE_APP_BAUD  HAL_UART_BR_115200
//   98 #endif
//   99 
//  100 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//  101 #if !defined( SAMPLE_APP_THRESH )
//  102 #define SAMPLE_APP_THRESH  64
//  103 #endif
//  104 
//  105 #if !defined( SAMPLE_APP_RX_SZ )
//  106 #define SAMPLE_APP_RX_SZ  128
//  107 #endif
//  108 
//  109 #if !defined( SAMPLE_APP_TX_SZ )
//  110 #define SAMPLE_APP_TX_SZ  128
//  111 #endif
//  112 
//  113 // Millisecs of idle time after a byte is received before invoking Rx callback.
//  114 #if !defined( SAMPLE_APP_IDLE )
//  115 #define SAMPLE_APP_IDLE  6
//  116 #endif
//  117 
//  118 // Loopback Rx bytes to Tx for throughput testing.
//  119 #if !defined( SAMPLE_APP_LOOPBACK )
//  120 #define SAMPLE_APP_LOOPBACK  FALSE
//  121 #endif
//  122 
//  123 // This is the max byte count per OTA message.
//  124 #if !defined( SAMPLE_APP_TX_MAX )
//  125 #define SAMPLE_APP_TX_MAX  80
//  126 #endif
//  127 
//  128 #define SAMPLE_APP_RSP_CNT  4
//  129 
//  130 /*********************************************************************
//  131  * TYPEDEFS
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * GLOBAL VARIABLES
//  136  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138 
//  139 uint8 SampleApp_TaskID;    // Task ID for internal task/event processing.
//  140 
//  141 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  142 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 0
        DW 0
//  143 {
//  144   SAMPLEAPP_PERIODIC_CLUSTERID,
//  145   SAMPLEAPP_FLASH_CLUSTERID,
//  146   SAMPLEAPP_CLUSTERID1,
//  147   SAMPLEAPP_CLUSTERID2
//  148 };
//  149 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  150 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 6
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 6
        DATA16
        DW SampleApp_ClusterList
//  151 {
//  152   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  153   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  154   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  155   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  156   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  157   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  158   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  159   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  160   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  161 };
//  162 
//  163 // This is the Endpoint/Interface description.  It is defined here, but
//  164 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  165 // in the structure here and make it a "const" (in code space).  The
//  166 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  168 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  169 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 20
        DATA16
        DW SerialApp_TaskID
        DW SampleApp_SimpleDesc
        DATA8
        DB 0
//  170 {
//  171   SAMPLEAPP_ENDPOINT,
//  172  &SerialApp_TaskID,
//  173   (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
//  174   noLatencyReqs
//  175 };
//  176 
//  177 /*********************************************************************
//  178  * EXTERNAL VARIABLES
//  179  */
//  180 
//  181 typedef struct
//  182 {
//  183     int temperature;           // -100 degrees C to 200 degrees C
//  184     int water_level;           // -50m to 50m
//  185     int  flow_rate;   	 // -10000 L/min to 10000 L/min
//  186     uint8  PH;   		 // 0 to 14
//  187     uint32  salinity;   	 // 0 to 2000000 mg
//  188     uint8  batt_level;        // 0 to 100 percent
//  189     float GNSS_latitude;         // -85 to 85 decimal degrees
//  190     float GNSS_longitude;        // -180 to 180 decimal degrees
//  191     
//  192     bool sensors_okay;   	 // 1=good, 0=bad
//  193     bool node_okay;   		 // 1=good, 0=bad
//  194     char error_state[25];    	 // char message, null terminated "\n"
//  195  
//  196 } data_sensor_outgoing;
//  197 
//  198 
//  199 /*********************************************************************
//  200  * EXTERNAL FUNCTIONS
//  201  */
//  202 
//  203 /*********************************************************************
//  204  * LOCAL VARIABLES
//  205  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  206 static uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  207                           // This variable will be received when
//  208                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  209 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  210 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  211 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  212 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  213 afAddrType_t SampleApp_Periodic_DstAddr;
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  214 afAddrType_t SampleApp_Flash_DstAddr;
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  215 afAddrType_t SampleApp_Broadcast;
SampleApp_Broadcast:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  216 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  217 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  218 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  219 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  220 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  221 
//  222 static afAddrType_t SampleApp_TxAddr;
//  223 static uint8 SampleApp_TxSeq;
//  224 static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  225 static uint8 SampleApp_TxLen;
SampleApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  226 
//  227 static afAddrType_t SampleApp_RxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  228 static uint8 SampleApp_RxSeq;
SampleApp_RxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  229 static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
//  230 
//  231 /*********************************************************************
//  232  * LOCAL FUNCTIONS
//  233  */
//  234 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  235 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  236 void SampleApp_SendPeriodicMessage( void );
//  237 void SampleApp_SendFlashMessage( uint16 flashTime );
//  238 
//  239 static void SampleApp_CallBack(uint8 port, uint8 event);
//  240 
//  241 /*********************************************************************
//  242  * NETWORK LAYER CALLBACKS
//  243  */
//  244 
//  245 /*********************************************************************
//  246  * PUBLIC FUNCTIONS
//  247  */
//  248 
//  249 /*********************************************************************
//  250  * @fn      SampleApp_Init
//  251  *
//  252  * @brief   Initialization function for the Generic App Task.
//  253  *          This is called during initialization and should contain
//  254  *          any application specific initialization (ie. hardware
//  255  *          initialization/setup, table initialization, power up
//  256  *          notificaiton ... ).
//  257  *
//  258  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  259  *                    used to send messages and set timers.
//  260  *
//  261  * @return  none
//  262  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  263 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SampleApp_Init
        CODE
//  264 {
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV       A,#-0xb
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 29
        MOV       A,#-0x1d
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
        MOV       A,R1
        MOV       R6,A
//  265   SampleApp_TaskID = task_id;
        MOV       DPTR,#SampleApp_TaskID
        MOVX      @DPTR,A
//  266   SampleApp_NwkState = DEV_INIT;
        MOV       DPTR,#SampleApp_NwkState
        MOV       A,#0x1
        MOVX      @DPTR,A
//  267   SampleApp_TransID = 0;
        MOV       DPTR,#SampleApp_TransID
        CLR       A
        MOVX      @DPTR,A
//  268 
//  269   // Device hardware initialization can be added here or in main() (Zmain.c).
//  270   // If the hardware is application specific - add it here.
//  271   // If the hardware is other parts of the device add it in main().
//  272 
//  273  #if defined ( BUILD_ALL_DEVICES )
//  274   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  275   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  276   // together - if they are - we will start up a coordinator. Otherwise,
//  277   // the device will start as a router.
//  278   if ( readCoordinatorJumper() )
//  279     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  280   else
//  281     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  282 #endif // BUILD_ALL_DEVICES
//  283 
//  284 #if defined ( HOLD_AUTO_START )
//  285   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  286   //  from starting the device and wait for the application to
//  287   //  start the device.
//  288   ZDOInitDevice(0);
//  289 #endif
//  290 
//  291   // Setup for the periodic message's destination address
//  292   // Broadcast to everyone
//  293   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  294   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  295   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV       DPTR,#SampleApp_Periodic_DstAddr
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  296 
//  297   // Setup for the flash command's destination address - Group 1
//  298   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV       DPTR,#SampleApp_Flash_DstAddr + 8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  299   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  300   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV       DPTR,#SampleApp_Flash_DstAddr
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  301   
//  302   SampleApp_Broadcast.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV       DPTR,#SampleApp_Broadcast + 8
        MOV       A,#0xf
        MOVX      @DPTR,A
//  303   SampleApp_Broadcast.endPoint = SAMPLEAPP_ENDPOINT;
        INC       DPTR
        MOV       A,#0x14
        MOVX      @DPTR,A
//  304   SampleApp_Broadcast.addr.shortAddr = 0xFFFF;
        MOV       DPTR,#SampleApp_Broadcast
        MOV       A,#-0x1
        MOVX      @DPTR,A
        INC       DPTR
        MOVX      @DPTR,A
//  305 
//  306   // Fill out the endpoint description.
//  307   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV       DPTR,#SampleApp_epDesc
        MOV       A,#0x14
        MOVX      @DPTR,A
//  308   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC       DPTR
        MOV       A,#SampleApp_TaskID & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX      @DPTR,A
//  309   SampleApp_epDesc.simpleDesc
//  310             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC       DPTR
        MOV       A,#SampleApp_SimpleDesc & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX      @DPTR,A
//  311   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC       DPTR
        CLR       A
        LCALL     ?Subroutine1 & 0xFFFF
//  312 
//  313   // Register the endpoint description with the AF
//  314   afRegister( &SampleApp_epDesc );
//  315 
//  316   // Register for all key events - This app will handle all key events
//  317   RegisterForKeys( SampleApp_TaskID );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function RegisterForKeys
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  318 
//  319   // By default, all devices start out in Group 1
//  320   SampleApp_Group.ID = 0x0001;
        MOV       DPTR,#SampleApp_Group
        MOV       A,#0x1
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  321   osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
        ; Setup parameters for call to function osal_memcpy
        MOV       ?V0,#`?<Constant "Group 1">` & 0xff
        MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV       ?V2,A
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 43)
        MOV       R4,#0x7
        MOV       R5,#0x0
        MOV       R2,#(SampleApp_Group + 2) & 0xff
        MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV       A,#0x3
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 40)
//  322   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV       R2,#SampleApp_Group & 0xff
        MOV       R3,#(SampleApp_Group >> 8) & 0xff
        MOV       R1,#0x14
        LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
//  323   
//  324   // Serial initialization start 
//  325   halUARTCfg_t uartConfig;
//  326 
//  327   SampleApp_TaskID = task_id;
        MOV       A,R6
        MOV       DPTR,#SampleApp_TaskID
        MOVX      @DPTR,A
//  328   SampleApp_RxSeq = 0xC3;
        MOV       DPTR,#SampleApp_RxSeq
        MOV       A,#-0x3d
        LCALL     ?Subroutine1 & 0xFFFF
//  329 
//  330   afRegister( (endPointDesc_t *)&SampleApp_epDesc );
//  331 
//  332   RegisterForKeys( task_id );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function RegisterForKeys
        MOV       A,R6
        MOV       R1,A
        LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
//  333 
//  334   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       A,#0x1
        MOVX      @DPTR,A
//  335   uartConfig.baudRate             = SAMPLE_APP_BAUD;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x2
        MOVX      @DPTR,A
//  336   uartConfig.flowControl          = TRUE;
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  337   uartConfig.flowControlThreshold = SAMPLE_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x40
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  338   uartConfig.rx.maxBufSize        = SAMPLE_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV       A,#0xa
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  339   uartConfig.tx.maxBufSize        = SAMPLE_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV       A,#0x12
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#-0x80
        MOVX      @DPTR,A
        INC       DPTR
        CLR       A
        MOVX      @DPTR,A
//  340   uartConfig.idleTimeout          = SAMPLE_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x6
        MOVX      @DPTR,A
//  341   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV       A,#0x16
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#0x1
        MOVX      @DPTR,A
//  342   uartConfig.callBackFunc         = SampleApp_CallBack;
        MOV       A,#0x1b
        LCALL     ?XSTACK_DISP0_8
        MOV       A,#`??SampleApp_CallBack::?relay` & 0xff
        MOVX      @DPTR,A
        INC       DPTR
        MOV       A,#(`??SampleApp_CallBack::?relay` >> 8) & 0xff
        MOVX      @DPTR,A
//  343   HalUARTOpen (SAMPLE_APP_PORT, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,#0x0
        LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
//  344   // Serial Initialization end
//  345 
//  346 #if defined ( LCD_SUPPORTED )
//  347   HalLcdWriteString( "SerialApp+Labs", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV       R1,#0x1
        MOV       R2,#`?<Constant "SerialApp+Labs">` & 0xff
        MOV       R3,#(`?<Constant "SerialApp+Labs">` >> 8) & 0xff
        LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
//  348 #endif
//  349 }
        MOV       A,#0x1d
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       R7,#0x3
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function SampleApp_Init
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function SampleApp_Init
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOVX      @DPTR,A
        ; Setup parameters for call to function afRegister
        ; Setup parameters for call to function afRegister
        MOV       R2,#SampleApp_epDesc & 0xff
        MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL     `??afRegister::?relay`; Banked call to: afRegister
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
//  350 
//  351 /*********************************************************************
//  352  * @fn      SampleApp_ProcessEvent
//  353  *
//  354  * @brief   Generic Application Task event processor.  This function
//  355  *          is called to process all events for the task.  Events
//  356  *          include timers, messages and any other user defined events.
//  357  *
//  358  * @param   task_id  - The OSAL assigned task ID.
//  359  * @param   events - events to process.  This is a bit map and can
//  360  *                   contain more than one event.
//  361  *
//  362  * @return  none
//  363  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  364 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function SampleApp_ProcessEvent
        CODE
//  365 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV       A,#-0xc
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  366   afIncomingMSGPacket_t *MSGpkt;
//  367   (void)task_id;  // Intentionally unreferenced parameter
//  368 
//  369   if ( events & SYS_EVENT_MSG )
        ANL       A,#0x80
        JZ        ??SampleApp_ProcessEvent_0
//  370   {
//  371     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP      ??SampleApp_ProcessEvent_1
//  372     while ( MSGpkt )
//  373     {
//  374       switch ( MSGpkt->hdr.event )
//  375       {
//  376         // Received when a key is pressed
//  377         case KEY_CHANGE:
//  378           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  379           break;
//  380 
//  381         // Received when a messages is received (OTA) for this endpoint
//  382         case AF_INCOMING_MSG_CMD:
//  383           SampleApp_MessageMSGCB( MSGpkt );
//  384           break;
//  385 
//  386         // Received whenever the device changes state in the network
//  387         case ZDO_STATE_CHANGE:
//  388           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC       DPTR
        MOVX      A,@DPTR
        MOV       DPTR,#SampleApp_NwkState
        MOVX      @DPTR,A
//  389           if ( (SampleApp_NwkState == DEV_ZB_COORD)
//  390               || (SampleApp_NwkState == DEV_ROUTER)
//  391               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL       A,#0x9
        JZ        ??SampleApp_ProcessEvent_3
        MOVX      A,@DPTR
        XRL       A,#0x7
        JZ        ??SampleApp_ProcessEvent_3
        MOVX      A,@DPTR
        XRL       A,#0x6
        JNZ       ??SampleApp_ProcessEvent_4
//  392           {
//  393             // Start sending the periodic message in a regular interval.
//  394             osal_start_timerEx( SampleApp_TaskID,
//  395                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  396                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV       R4,#-0x78
        MOV       R5,#0x13
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  397           }
//  398           else
//  399           {
//  400             // Device is no longer in the network
//  401           }
//  402           break;
//  403 
//  404         default:
//  405           break;
//  406       }
//  407 
//  408       // Release the memory
//  409       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  410 
//  411       // Next - if one is available
//  412       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       A,?V0
        ORL       A,?V1
        JZ        ??SampleApp_ProcessEvent_5
        MOV       DPL,?V0
        MOV       DPH,?V1
        MOVX      A,@DPTR
        ADD       A,#-0x1a
        JZ        ??SampleApp_ProcessEvent_6
        ADD       A,#0x49
        JZ        ??SampleApp_ProcessEvent_2
        SJMP      ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV       R2,?V0
        MOV       R3,?V1
        LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
        SJMP      ??SampleApp_ProcessEvent_4
//  413     }
//  414     
//  415     
//  416 
//  417     // return unprocessed events
//  418     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV       A,R6
        MOV       R2,A
        MOV       A,R7
        XRL       A,#0x80
        SJMP      ??SampleApp_ProcessEvent_7
//  419   }
//  420 
//  421   // Send a message out - This event is generated by a timer
//  422   //  (setup in SampleApp_Init()).
//  423   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV       A,R2
        MOV       C,0xE0 /* A   */.0
        JNC       ??SampleApp_ProcessEvent_8
//  424   {
//  425     // Send the periodic message
//  426     SampleApp_SendPeriodicMessage();
        ; Setup parameters for call to function SampleApp_SendPeriodicMessage
        LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
//  427 
//  428     // Setup to send message again in normal period (+ a little jitter)
//  429     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  430         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
        ; Setup parameters for call to function osal_start_timerEx
        MOV       A,R2
        ADD       A,#-0x78
        MOV       R4,A
        CLR       A
        ADDC      A,#0x13
        MOV       R5,A
        MOV       R2,#0x1
        MOV       R3,#0x0
        MOV       DPTR,#SampleApp_TaskID
        MOVX      A,@DPTR
        MOV       R1,A
        LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
//  431 
//  432     // return unprocessed events
//  433     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV       A,R6
        XRL       A,#0x1
        MOV       R2,A
        MOV       A,R7
??SampleApp_ProcessEvent_7:
        MOV       R3,A
        SJMP      ??SampleApp_ProcessEvent_9
//  434   }
//  435 
//  436   // Discard unknown events
//  437   return 0;
??SampleApp_ProcessEvent_8:
        MOV       R2,#0x0
        MOV       R3,#0x0
??SampleApp_ProcessEvent_9:
        MOV       R7,#0x4
        LJMP      ?BANKED_LEAVE_XDATA
//  438 }
          CFI EndBlock cfiBlock4
//  439 
//  440 /*********************************************************************
//  441  * Event Generation Functions
//  442  */
//  443 /*********************************************************************
//  444  * @fn      SampleApp_HandleKeys
//  445  *
//  446  * @brief   Handles all key events for this device.
//  447  *
//  448  * @param   shift - true if in shift/alt.
//  449  * @param   keys - bit field for key events. Valid entries:
//  450  *                 HAL_KEY_SW_2
//  451  *                 HAL_KEY_SW_1
//  452  *
//  453  * @return  none
//  454  */
//  455 
//  456 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  457 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SampleApp_HandleKeys
        CODE
//  458 {
        ; Saved register size: 0
        ; Auto size: 0
//  459 
//  460   if ( keys & HAL_KEY_SW_1 )
//  461   {
//  462   }
//  463 
//  464   if ( keys & HAL_KEY_SW_2 )
//  465   {
//  466   }
//  467   
//  468   if ( keys & HAL_KEY_SW_3 )
//  469   {
//  470   }
//  471   
//  472   if ( keys & HAL_KEY_SW_4 )
//  473   {
//  474   }
//  475 }
        LJMP      ?BRET
          CFI EndBlock cfiBlock5
//  476 
//  477 /*********************************************************************
//  478  * LOCAL FUNCTIONS
//  479  */
//  480 
//  481 /*********************************************************************
//  482  * @fn      SampleApp_MessageMSGCB
//  483  *
//  484  * @brief   Data message processor callback.  This function processes
//  485  *          any incoming data - probably from other devices.  So, based
//  486  *          on cluster ID, perform the intended action.
//  487  *
//  488  * @param   none
//  489  *
//  490  * @return  none
//  491   */
//  492 
//  493 typedef struct
//  494 {
//  495   uint8 testData1;
//  496   uint8 testData2;
//  497   uint16 testData3;
//  498   char text[10];
//  499 } dataToSend;
//  500 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  501 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
        CODE
//  502 {
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 14
        MOV       A,#-0xe
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV       A,R2
        MOV       R6,A
        MOV       A,R3
        MOV       R7,A
//  503   int dataSize; //Data size of received packet
//  504   dataToSend receiveData;
//  505   
//  506   switch ( pkt->clusterId )
        MOV       DPL,R2
        MOV       DPH,A
        INC       DPTR
        INC       DPTR
        INC       DPTR
        INC       DPTR
        MOVX      A,@DPTR
        XRL       A,#0x3
        JNZ       ??SampleApp_MessageMSGCB_0
        INC       DPTR
        MOVX      A,@DPTR
??SampleApp_MessageMSGCB_0:
        JNZ       ??SampleApp_MessageMSGCB_1
//  507   {
//  508     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  509       break;
//  510       
//  511     case SAMPLEAPP_CLUSTERID1:
//  512       dataSize = sizeof(receiveData);
//  513       HalLcdWriteStringValue("Data Size:", dataSize, 10,HAL_LCD_LINE_1);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,#0xa
        MOV       R4,#0xe
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Data Size:">` & 0xff
        MOV       R3,#(`?<Constant "Data Size:">` >> 8) & 0xff
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  514       memcpy(&receiveData,pkt->cmd.Data,dataSize);
        ; Setup parameters for call to function memcpy
        MOV       ?V0,#0xe
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV       A,R6
        ADD       A,#0x21
        MOV       DPL,A
        CLR       A
        ADDC      A,R7
        MOV       DPH,A
        MOVX      A,@DPTR
        MOV       R4,A
        INC       DPTR
        MOVX      A,@DPTR
        MOV       R5,A
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP101_8
        LCALL     `??memcpy::?relay`; Banked call to: memcpy
        MOV       A,#0x2
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  515       HalLcdWriteStringValue("Data:", receiveData.testData2, 10, HAL_LCD_LINE_2);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,#0xa
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,#`?<Constant "Data:">` & 0xff
        MOV       R3,#(`?<Constant "Data:">` >> 8) & 0xff
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  516       //HalLcdWriteStringValue("Byte: ", pkt->cmd.Data[4], 10,HAL_LCD_LINE_3);
//  517       
//  518       //char ptr[5] = {pkt->cmd.Data[4], pkt->cmd.Data[5], pkt->cmd.Data[6], pkt->cmd.Data[7], pkt->cmd.Data[8]};
//  519       
//  520       /*
//  521       HalLcdWriteString((char*)pkt->cmd.Data[4],HAL_LCD_LINE_1);
//  522  
//  523       HalLcdWriteString((char*)pkt->cmd.Data[5],HAL_LCD_LINE_2);
//  524       
//  525       HalLcdWriteString((char*)pkt->cmd.Data[7],HAL_LCD_LINE_3);
//  526       */
//  527       char piece = receiveData.text[0];
//  528       char *ptr = &receiveData.text[0];
//  529       HalLcdWriteStringValue(ptr,piece, 10, HAL_LCD_LINE_3);
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV       R1,#0xa
        MOV       A,#0x5
        LCALL     ?XSTACK_DISP0_8
        MOVX      A,@DPTR
        MOV       R4,A
        MOV       R5,#0x0
        MOV       R2,DPL
        MOV       R3,DPH
        LCALL     ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
//  530       
//  531       break;
//  532 
//  533     case SAMPLEAPP_FLASH_CLUSTERID:
//  534       break;
//  535   }
//  536 }
??SampleApp_MessageMSGCB_1:
        MOV       A,#0xe
        LJMP      ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock6
//  537 
//  538 /*********************************************************************
//  539  * @fn      SampleApp_SendPeriodicMessage
//  540  *
//  541  * @brief   Send the periodic message.
//  542  *
//  543  * @param   none
//  544  *
//  545  * @return  none
//  546  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  547 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function SampleApp_SendPeriodicMessage
        CODE
//  548 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  549   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  550                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  551                        1,
//  552                        (uint8*)&SampleAppPeriodicCounter,
//  553                        &SampleApp_TransID,
//  554                        AF_DISCV_ROUTE,
//  555                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 11)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV       ?V0,#SampleAppPeriodicCounter & 0xff
        MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV       ?V0,#0x1
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        SJMP      ?Subroutine0
//  556   {
//  557   }
//  558   else
//  559   {
//  560     // Error occurred in request to send.
//  561   }
//  562 }
          CFI EndBlock cfiBlock7
//  563 
//  564 /*********************************************************************
//  565  * @fn      SampleApp_SendFlashMessage
//  566  *
//  567  * @brief   Send the flash message to group 1.
//  568  *
//  569  * @param   flashTime - in milliseconds
//  570  *
//  571  * @return  none
//  572  */

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  573 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function SampleApp_SendFlashMessage
        CODE
//  574 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV       A,#-0x3
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  575   uint8 buffer[3];
//  576   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV       DPTR,#SampleAppFlashCounter
        MOVX      A,@DPTR
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOVX      @DPTR,A
        MOV       DPTR,#SampleAppFlashCounter
        MOVX      A,@DPTR
        INC       A
        MOVX      @DPTR,A
//  577   buffer[1] = LO_UINT16( flashTime );
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R2
        MOVX      @DPTR,A
//  578   buffer[2] = HI_UINT16( flashTime );
        MOV       A,#0x2
        LCALL     ?XSTACK_DISP0_8
        MOV       A,R3
        MOVX      @DPTR,A
//  579 
//  580   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  581                        SAMPLEAPP_FLASH_CLUSTERID,
//  582                        3,
//  583                        buffer,
//  584                        &SampleApp_TransID,
//  585                        AF_DISCV_ROUTE,
//  586                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV       ?V0,#0x1e
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV       ?V0,#SampleApp_TransID & 0xff
        MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV       A,#0x3
        LCALL     ?XSTACK_DISP100_8
        MOV       ?V0,R0
        MOV       ?V1,R1
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV       ?V0,#0x3
        MOV       ?V1,#0x0
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV       ?V0,#0x2
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV       R1,#0x20
        MOV       R4,#SampleApp_epDesc & 0xff
        MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV       R2,#SampleApp_Flash_DstAddr & 0xff
        MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV       A,#0x9
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  587   {
//  588   }
//  589   else
//  590   {
//  591     // Error occurred in request to send.
//  592   }
//  593 }
        MOV       A,#0x3
          CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV       R7,#0x2
        LJMP      ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  594 
//  595 /*********************************************************************
//  596 *********************************************************************/
//  597 
//  598 /*********************************************************************
//  599  * @fn      SampleApp_CallBack
//  600  *
//  601  * @brief   Send data OTA.
//  602  *
//  603  * @param   port - UART port.
//  604  * @param   event - the UART port event flag.
//  605  *
//  606  * @return  none
//  607  */
//  608 

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
//  609 static void SampleApp_CallBack(uint8 port, uint8 event)
SampleApp_CallBack:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function SampleApp_CallBack
        CODE
//  610 {
        FUNCALL SampleApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 91, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 91, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_CallBack, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV       A,#-0xa
        LCALL     ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 81
        MOV       A,#-0x51
        LCALL     ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
        MOV       A,R2
        MOV       R6,A
//  611   (void)port;
//  612   uint8 localBuf[81];
//  613   uint16 receivedUARTLen;
//  614 
//  615   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  616 #if SERIAL_APP_LOOPBACK
//  617       (SampleApp_TxLen < SERIAL_APP_TX_MAX))
//  618 #else
//  619       !SampleApp_TxLen)
        MOV       A,#0x7
        ANL       A,R6
        JZ        ??SampleApp_CallBack_0
        MOV       DPTR,#SampleApp_TxLen
        MOVX      A,@DPTR
        JNZ       ??SampleApp_CallBack_0
//  620 #endif
//  621   {
//  622     // buffer needed to be emptied for the new liner
//  623     for(int i = 0; i < 81; i++){
//  624       localBuf[i] = 0;
        CLR       A
        MOV       DPL,?XSP + 0
        MOV       DPH,?XSP + 1
        MOV       R0,#0x51
??SampleApp_CallBack_1:
        MOVX      @DPTR,A
        INC       DPTR
        DJNZ      R0,??SampleApp_CallBack_1
//  625     }   
//  626     receivedUARTLen= HalUARTRead(SAMPLE_APP_PORT, localBuf, SAMPLE_APP_TX_MAX);
        ; Setup parameters for call to function HalUARTRead
        MOV       R4,#0x50
        MOV       R5,A
        MOV       R2,?XSP + 0
        MOV       R3,?XSP + 1
        MOV       R1,A
        LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
        MOV       ?V0,R2
        MOV       ?V1,R3
        MOV       R4,?V0
        MOV       R5,?V1
//  627     HalLcdWriteStringValue( localBuf,  receivedUARTLen, 16, HAL_LCD_LINE_3 ); 
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV       ?V0,#0x3
        MOV       R0,#?V0
        LCALL     ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 92)
        MOV       R1,#0x10
        MOV       A,#0x1
        LCALL     ?XSTACK_DISP101_8
        LCALL     ?Subroutine2 & 0xFFFF
//  628     
//  629     
//  630     //HalUARTWrite(SAMPLE_APP_PORT, *localBuf, 81);
//  631     //SampleApp_Send();
//  632   }
??CrossCallReturnLabel_5:
        LCALL     ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 91)
//  633 }
??SampleApp_CallBack_0:
        MOV       A,#0x51
        SJMP      ?Subroutine0
          CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:HUGECODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function SampleApp_MessageMSGCB
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function SampleApp_MessageMSGCB
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function SampleApp_MessageMSGCB
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function SampleApp_CallBack
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+-2
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 92)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
        MOV       A,#0x1
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_ProcessEvent::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_HandleKeys::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_MessageMSGCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_SendPeriodicMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_SendFlashMessage::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??SampleApp_CallBack::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SampleApp_CallBack

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SerialApp+Labs">`:
        DB "SerialApp+Labs"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Data Size:">`:
        DB "Data Size:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Data:">`:
        DB "Data:"

        END
//  634 
//  635 
//  636 /*********************************************************************
//  637 *********************************************************************/
// 
// 892 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//  70 bytes in segment XDATA_ROM_C
//  68 bytes in segment XDATA_Z
// 
//  42 bytes of CODE     memory
//  70 bytes of CONST    memory
// 892 bytes of HUGECODE memory
//  68 bytes of XDATA    memory
//
//Errors: none
//Warnings: 8
