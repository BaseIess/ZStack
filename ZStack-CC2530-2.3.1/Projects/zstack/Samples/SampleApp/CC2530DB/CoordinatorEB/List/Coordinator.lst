###############################################################################
#
# IAR C/C++ Compiler V10.20.1.5333 for 8051               19/Sep/2018  15:21:28
# Copyright 2004-2018 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for 8051, Evaluation version 10.20
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
#    Command line       =  
#        -f C:\Users\Re\AppData\Local\Temp\EW41A8.tmp
#        (C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
#        -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D
#        LCD_SUPPORTED=DEBUG -lC
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        -lA
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List
#        --diag_suppress Pe001,Pa010 -o
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj
#        -e --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 8 -f
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DSECURE=1 -DZG_SECURE_DYNAMIC=1 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x03, 0x05, 0x04, 0x06,
#        0x05, 0x03, 0x04, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SEC\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\SYS\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\ZMAC\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\
#        -I
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\
#        -Ohz --require_prototypes)
#    Locale             =  English_AUS.1252
#    List file          =  
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\List\Coordinator.lst
#    Object file        =  
#        C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\CC2530DB\CoordinatorEB\Obj\Coordinator.r51
#
###############################################################################

C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ?AS IS? WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "AF.h"
     60          #include "OSAL.h"
     61          #include "OnBoard.h"
     62          #include "ZGlobals.h"
     63          #include "AF.h"
     64          #include "aps_groups.h"
     65          #include "ZDApp.h"
     66          #include "ZDObject.h"
     67          #include "ZDProfile.h"
     68          #include "stdio.h"sprin
                                   ^
Warning[Pe014]: extra text after expected end of preprocessing directive
     69          #include "string.h"
     70          
     71          #include "SampleApp.h"
     72          #include "SampleAppHw.h"
     73          
     74          /* HAL */
     75          #include "hal_drivers.h"
     76          #if defined (LCD_SUPPORTED )
     77            #include "hal_lcd.h"
     78          #endif
     79          #include "hal_led.h"
     80          #include "hal_key.h"
     81          #include "hal_adc.h"
     82          #include "hal_uart.h"
     83          
     84          /*********************************************************************
     85           * MACROS
     86           */
     87          
     88          /*********************************************************************
     89           * CONSTANTS
     90           */
     91          
     92          #if !defined( SAMPLE_APP_PORT )
     93          #define SAMPLE_APP_PORT  0
     94          #endif
     95          
     96          #if !defined( SAMPLE_APP_BAUD )
     97          #define SAMPLE_APP_BAUD  HAL_UART_BR_9600
     98          //#define SAMPLE_APP_BAUD  HAL_UART_BR_38400
     99          //#define SAMPLE_APP_BAUD  HAL_UART_BR_115200
    100          #endif
    101          
    102          // When the Rx buf space is less than this threshold, invoke the Rx callback.
    103          #if !defined( SAMPLE_APP_THRESH )
    104          #define SAMPLE_APP_THRESH  64
    105          #endif
    106          
    107          #if !defined( SAMPLE_APP_RX_SZ )
    108          #define SAMPLE_APP_RX_SZ  128
    109          #endif
    110          
    111          #if !defined( SAMPLE_APP_TX_SZ )
    112          #define SAMPLE_APP_TX_SZ  400
    113          #endif
    114          
    115          // Millisecs of idle time after a byte is received before invoking Rx callback.
    116          #if !defined( SAMPLE_APP_IDLE )
    117          #define SAMPLE_APP_IDLE  6
    118          #endif
    119          
    120          // Loopback Rx bytes to Tx for throughput testing.
    121          #if !defined( SAMPLE_APP_LOOPBACK )
    122          #define SAMPLE_APP_LOOPBACK  FALSE
    123          #endif
    124          
    125          // This is the max byte count per OTA message.
    126          #if !defined( SAMPLE_APP_TX_MAX )
    127          #define SAMPLE_APP_TX_MAX  128
    128          #endif
    129          
    130          #define SAMPLE_APP_RSP_CNT  4
    131          
    132          /*********************************************************************
    133           * TYPEDEFS
    134           */
    135          
    136          /*********************************************************************
    137           * GLOBAL VARIABLES
    138           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
   \                     SerialApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          
    141          uint8 SampleApp_TaskID;    // Task ID for internal task/event processing.
    142          
    143          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    144          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
    145          {
    146            SAMPLEAPP_PERIODIC_CLUSTERID,
    147            SAMPLEAPP_FLASH_CLUSTERID,
    148            SAMPLEAPP_CLUSTERID1,
    149            SAMPLEAPP_CLUSTERID2
    150          };
    151          

   \                                 In  segment XDATA_ROM_C, align 1
    152          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    153          {
    154            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    155            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    156            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    157            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    158            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    159            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    160            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    161            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    162            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    163          };
    164          
    165          // This is the Endpoint/Interface description.  It is defined here, but
    166          // filled-in in SampleApp_Init().  Another way to go would be to fill
    167          // in the structure here and make it a "const" (in code space).  The
    168          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_ROM_C, align 1
    171          const endPointDesc_t SerialApp_epDesc =
   \                     SerialApp_epDesc:
   \   000000   14           DB 20
   \   000001   ....         DW SerialApp_TaskID
   \   000003   ....         DW SampleApp_SimpleDesc
   \   000005   00           DB 0
    172          {
    173            SAMPLEAPP_ENDPOINT,
    174           &SerialApp_TaskID,
    175            (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc,
    176            noLatencyReqs
    177          };
    178          
    179          /*********************************************************************
    180           * EXTERNAL VARIABLES
    181           */
    182          
    183          typedef struct
    184          {
    185              int temperature;           // -100 degrees C to 200 degrees C
    186              int water_level;           // -50m to 50m
    187              int  flow_rate;   	 // -10000 L/min to 10000 L/min
    188              uint8  PH;   		 // 0 to 14
    189              uint32  salinity;   	 // 0 to 2000000 mg
    190              uint8  batt_level;        // 0 to 100 percent
    191              float GNSS_latitude;         // -85 to 85 decimal degrees
    192              float GNSS_longitude;        // -180 to 180 decimal degrees
    193              
    194              bool sensors_okay;   	 // 1=good, 0=bad
    195              bool node_okay;   		 // 1=good, 0=bad
    196              char error_state[25];    	 // char message, null terminated "\n"
    197           
    198          } data_sensor_outgoing;
    199          
    200          
    201          /*********************************************************************
    202           * EXTERNAL FUNCTIONS
    203           */
    204          
    205          /*********************************************************************
    206           * LOCAL VARIABLES
    207           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    208          static uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    209                                    // This variable will be received when
    210                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    214          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          afAddrType_t SampleApp_Broadcast;
   \                     SampleApp_Broadcast:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    218          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    220          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    223          
    224          static afAddrType_t SampleApp_TxAddr;
    225          static uint8 SampleApp_TxSeq;
    226          static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    227          static uint8 SampleApp_TxLen;
   \                     SampleApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    228          
    229          static afAddrType_t SampleApp_RxAddr;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    230          static uint8 SampleApp_RxSeq;
   \                     SampleApp_RxSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    231          static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
    232          
    233          /*********************************************************************
    234           * LOCAL FUNCTIONS
    235           */
    236          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    237          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    238          void SampleApp_SendPeriodicMessage( void );
    239          void SampleApp_SendFlashMessage( uint16 flashTime );
    240          
    241          static void SampleApp_CallBack(uint8 port, uint8 event);
    242          
    243          /*********************************************************************
    244           * NETWORK LAYER CALLBACKS
    245           */
    246          
    247          /*********************************************************************
    248           * PUBLIC FUNCTIONS
    249           */
    250          
    251          /*********************************************************************
    252           * @fn      SampleApp_Init
    253           *
    254           * @brief   Initialization function for the Generic App Task.
    255           *          This is called during initialization and should contain
    256           *          any application specific initialization (ie. hardware
    257           *          initialization/setup, table initialization, power up
    258           *          notificaiton ... ).
    259           *
    260           * @param   task_id - the ID assigned by OSAL.  This ID should be
    261           *                    used to send messages and set timers.
    262           *
    263           * @return  none
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV       A,#-0x1d
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   E9           MOV       A,R1
   \   00000B   FE           MOV       R6,A
    267            SampleApp_TaskID = task_id;
   \   00000C   90....       MOV       DPTR,#SampleApp_TaskID
   \   00000F   F0           MOVX      @DPTR,A
    268            SampleApp_NwkState = DEV_INIT;
   \   000010   90....       MOV       DPTR,#SampleApp_NwkState
   \   000013   7401         MOV       A,#0x1
   \   000015   F0           MOVX      @DPTR,A
    269            SampleApp_TransID = 0;
   \   000016   90....       MOV       DPTR,#SampleApp_TransID
   \   000019   E4           CLR       A
   \   00001A   F0           MOVX      @DPTR,A
    270          
    271            // Device hardware initialization can be added here or in main() (Zmain.c).
    272            // If the hardware is application specific - add it here.
    273            // If the hardware is other parts of the device add it in main().
    274          
    275           #if defined ( BUILD_ALL_DEVICES )
    276            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    277            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    278            // together - if they are - we will start up a coordinator. Otherwise,
    279            // the device will start as a router.
    280            if ( readCoordinatorJumper() )
    281              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    282            else
    283              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    284          #endif // BUILD_ALL_DEVICES
    285          
    286          #if defined ( HOLD_AUTO_START )
    287            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    288            //  from starting the device and wait for the application to
    289            //  start the device.
    290            ZDOInitDevice(0);
    291          #endif
    292          
    293            // Setup for the periodic message's destination address
    294            // Broadcast to everyone
    295            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00001B   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00001E   740F         MOV       A,#0xf
   \   000020   F0           MOVX      @DPTR,A
    296            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000021   A3           INC       DPTR
   \   000022   7414         MOV       A,#0x14
   \   000024   F0           MOVX      @DPTR,A
    297            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000025   90....       MOV       DPTR,#SampleApp_Periodic_DstAddr
   \   000028   74FF         MOV       A,#-0x1
   \   00002A   F0           MOVX      @DPTR,A
   \   00002B   A3           INC       DPTR
   \   00002C   F0           MOVX      @DPTR,A
    298          
    299            // Setup for the flash command's destination address - Group 1
    300            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00002D   90....       MOV       DPTR,#SampleApp_Flash_DstAddr + 8
   \   000030   7401         MOV       A,#0x1
   \   000032   F0           MOVX      @DPTR,A
    301            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000033   A3           INC       DPTR
   \   000034   7414         MOV       A,#0x14
   \   000036   F0           MOVX      @DPTR,A
    302            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000037   90....       MOV       DPTR,#SampleApp_Flash_DstAddr
   \   00003A   7401         MOV       A,#0x1
   \   00003C   F0           MOVX      @DPTR,A
   \   00003D   A3           INC       DPTR
   \   00003E   E4           CLR       A
   \   00003F   F0           MOVX      @DPTR,A
    303            
    304            SampleApp_Broadcast.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000040   90....       MOV       DPTR,#SampleApp_Broadcast + 8
   \   000043   740F         MOV       A,#0xf
   \   000045   F0           MOVX      @DPTR,A
    305            SampleApp_Broadcast.endPoint = SAMPLEAPP_ENDPOINT;
   \   000046   A3           INC       DPTR
   \   000047   7414         MOV       A,#0x14
   \   000049   F0           MOVX      @DPTR,A
    306            SampleApp_Broadcast.addr.shortAddr = 0xFFFF;
   \   00004A   90....       MOV       DPTR,#SampleApp_Broadcast
   \   00004D   74FF         MOV       A,#-0x1
   \   00004F   F0           MOVX      @DPTR,A
   \   000050   A3           INC       DPTR
   \   000051   F0           MOVX      @DPTR,A
    307          
    308            // Fill out the endpoint description.
    309            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000052   90....       MOV       DPTR,#SampleApp_epDesc
   \   000055   7414         MOV       A,#0x14
   \   000057   F0           MOVX      @DPTR,A
    310            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000058   A3           INC       DPTR
   \   000059   74..         MOV       A,#SampleApp_TaskID & 0xff
   \   00005B   F0           MOVX      @DPTR,A
   \   00005C   A3           INC       DPTR
   \   00005D   74..         MOV       A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005F   F0           MOVX      @DPTR,A
    311            SampleApp_epDesc.simpleDesc
    312                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000060   A3           INC       DPTR
   \   000061   74..         MOV       A,#SampleApp_SimpleDesc & 0xff
   \   000063   F0           MOVX      @DPTR,A
   \   000064   A3           INC       DPTR
   \   000065   74..         MOV       A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000067   F0           MOVX      @DPTR,A
    313            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000068   A3           INC       DPTR
   \   000069   E4           CLR       A
   \   00006A   12....       LCALL     ?Subroutine4 & 0xFFFF
    314          
    315            // Register the endpoint description with the AF
    316            afRegister( &SampleApp_epDesc );
    317          
    318            // Register for all key events - This app will handle all key events
    319            RegisterForKeys( SampleApp_TaskID );
   \                     ??CrossCallReturnLabel_0:
   \   00006D                ; Setup parameters for call to function RegisterForKeys
   \   00006D   90....       MOV       DPTR,#SampleApp_TaskID
   \   000070   E0           MOVX      A,@DPTR
   \   000071   F9           MOV       R1,A
   \   000072   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    320          
    321            // By default, all devices start out in Group 1
    322            SampleApp_Group.ID = 0x0001;
   \   000075   90....       MOV       DPTR,#SampleApp_Group
   \   000078   7401         MOV       A,#0x1
   \   00007A   F0           MOVX      @DPTR,A
   \   00007B   A3           INC       DPTR
   \   00007C   E4           CLR       A
   \   00007D   F0           MOVX      @DPTR,A
    323            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   00007E                ; Setup parameters for call to function osal_memcpy
   \   00007E   75....       MOV       ?V0,#`?<Constant "Group 1">` & 0xff
   \   000081   75....       MOV       ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000084   F5..         MOV       ?V2,A
   \   000086   78..         MOV       R0,#?V0
   \   000088   12....       LCALL     ?PUSH_XSTACK_I_THREE
   \   00008B   7C07         MOV       R4,#0x7
   \   00008D   7D00         MOV       R5,#0x0
   \   00008F   7A..         MOV       R2,#(SampleApp_Group + 2) & 0xff
   \   000091   7B..         MOV       R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000093   12....       LCALL     `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000096   7403         MOV       A,#0x3
   \   000098   12....       LCALL     ?DEALLOC_XSTACK8
    324            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00009B                ; Setup parameters for call to function aps_AddGroup
   \   00009B   7A..         MOV       R2,#SampleApp_Group & 0xff
   \   00009D   7B..         MOV       R3,#(SampleApp_Group >> 8) & 0xff
   \   00009F   7914         MOV       R1,#0x14
   \   0000A1   12....       LCALL     `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
    325            
    326            // Serial initialization start 
    327            halUARTCfg_t uartConfig;
    328          
    329            SampleApp_TaskID = task_id;
   \   0000A4   EE           MOV       A,R6
   \   0000A5   90....       MOV       DPTR,#SampleApp_TaskID
   \   0000A8   F0           MOVX      @DPTR,A
    330            SampleApp_RxSeq = 0xC3;
   \   0000A9   90....       MOV       DPTR,#SampleApp_RxSeq
   \   0000AC   74C3         MOV       A,#-0x3d
   \   0000AE   12....       LCALL     ?Subroutine4 & 0xFFFF
    331          
    332            afRegister( (endPointDesc_t *)&SampleApp_epDesc );
    333          
    334            RegisterForKeys( task_id );
   \                     ??CrossCallReturnLabel_1:
   \   0000B1                ; Setup parameters for call to function RegisterForKeys
   \   0000B1   EE           MOV       A,R6
   \   0000B2   F9           MOV       R1,A
   \   0000B3   12....       LCALL     `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
    335          
    336            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   0000B6   85..82       MOV       DPL,?XSP + 0
   \   0000B9   85..83       MOV       DPH,?XSP + 1
   \   0000BC   7401         MOV       A,#0x1
   \   0000BE   F0           MOVX      @DPTR,A
    337            uartConfig.baudRate             = SAMPLE_APP_BAUD;
   \   0000BF   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C2   E4           CLR       A
   \   0000C3   F0           MOVX      @DPTR,A
    338            uartConfig.flowControl          = TRUE;
   \   0000C4   7402         MOV       A,#0x2
   \   0000C6   12....       LCALL     ?XSTACK_DISP0_8
   \   0000C9   7401         MOV       A,#0x1
   \   0000CB   F0           MOVX      @DPTR,A
    339            uartConfig.flowControlThreshold = SAMPLE_APP_THRESH; // 2x30 don't care - see uart driver.
   \   0000CC   7403         MOV       A,#0x3
   \   0000CE   12....       LCALL     ?XSTACK_DISP0_8
   \   0000D1   7440         MOV       A,#0x40
   \   0000D3   F0           MOVX      @DPTR,A
   \   0000D4   A3           INC       DPTR
   \   0000D5   E4           CLR       A
   \   0000D6   F0           MOVX      @DPTR,A
    340            uartConfig.rx.maxBufSize        = SAMPLE_APP_RX_SZ;  // 2x30 don't care - see uart driver.
   \   0000D7   740A         MOV       A,#0xa
   \   0000D9   12....       LCALL     ?XSTACK_DISP0_8
   \   0000DC   7480         MOV       A,#-0x80
   \   0000DE   F0           MOVX      @DPTR,A
   \   0000DF   A3           INC       DPTR
   \   0000E0   E4           CLR       A
   \   0000E1   F0           MOVX      @DPTR,A
    341            uartConfig.tx.maxBufSize        = SAMPLE_APP_TX_SZ;  // 2x30 don't care - see uart driver.
   \   0000E2   7412         MOV       A,#0x12
   \   0000E4   12....       LCALL     ?XSTACK_DISP0_8
   \   0000E7   7490         MOV       A,#-0x70
   \   0000E9   F0           MOVX      @DPTR,A
   \   0000EA   A3           INC       DPTR
   \   0000EB   7401         MOV       A,#0x1
   \   0000ED   F0           MOVX      @DPTR,A
    342            uartConfig.idleTimeout          = SAMPLE_APP_IDLE;   // 2x30 don't care - see uart driver.
   \   0000EE   7405         MOV       A,#0x5
   \   0000F0   12....       LCALL     ?XSTACK_DISP0_8
   \   0000F3   7406         MOV       A,#0x6
   \   0000F5   F0           MOVX      @DPTR,A
    343            uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
   \   0000F6   7416         MOV       A,#0x16
   \   0000F8   12....       LCALL     ?XSTACK_DISP0_8
   \   0000FB   7401         MOV       A,#0x1
   \   0000FD   F0           MOVX      @DPTR,A
    344            uartConfig.callBackFunc         = SampleApp_CallBack;
   \   0000FE   741B         MOV       A,#0x1b
   \   000100   12....       LCALL     ?XSTACK_DISP0_8
   \   000103   74..         MOV       A,#`??SampleApp_CallBack::?relay` & 0xff
   \   000105   F0           MOVX      @DPTR,A
   \   000106   A3           INC       DPTR
   \   000107   74..         MOV       A,#(`??SampleApp_CallBack::?relay` >> 8) & 0xff
   \   000109   F0           MOVX      @DPTR,A
    345            HalUARTOpen (SAMPLE_APP_PORT, &uartConfig);
   \   00010A                ; Setup parameters for call to function HalUARTOpen
   \   00010A   AA..         MOV       R2,?XSP + 0
   \   00010C   AB..         MOV       R3,?XSP + 1
   \   00010E   7900         MOV       R1,#0x0
   \   000110   12....       LCALL     `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
    346            // Serial Initialization end
    347          
    348          #if defined ( LCD_SUPPORTED )
    349            HalLcdWriteString( "SerialApp+Labs", HAL_LCD_LINE_1 );
   \   000113                ; Setup parameters for call to function HalLcdWriteString
   \   000113   7901         MOV       R1,#0x1
   \   000115   7A..         MOV       R2,#`?<Constant "SerialApp+Labs">` & 0xff
   \   000117   7B..         MOV       R3,#(`?<Constant "SerialApp+Labs">` >> 8) & 0xff
   \   000119   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    350          #endif
    351          }
   \   00011C   741D         MOV       A,#0x1d
   \   00011E   12....       LCALL     ?DEALLOC_XSTACK8
   \   000121                REQUIRE ?Subroutine0
   \   000121                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV       R7,#0x3
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX      @DPTR,A
   \   000001                ; Setup parameters for call to function afRegister
   \   000001                ; Setup parameters for call to function afRegister
   \   000001   7A..         MOV       R2,#SampleApp_epDesc & 0xff
   \   000003   7B..         MOV       R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000005   12....       LCALL     `??afRegister::?relay`; Banked call to: afRegister
   \   000008   22           RET
    352          
    353          /*********************************************************************
    354           * @fn      SampleApp_ProcessEvent
    355           *
    356           * @brief   Generic Application Task event processor.  This function
    357           *          is called to process all events for the task.  Events
    358           *          include timers, messages and any other user defined events.
    359           *
    360           * @param   task_id  - The OSAL assigned task ID.
    361           * @param   events - events to process.  This is a bit map and can
    362           *                   contain more than one event.
    363           *
    364           * @return  none
    365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    366          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    367          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV       A,#-0xc
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    368            afIncomingMSGPacket_t *MSGpkt;
    369            (void)task_id;  // Intentionally unreferenced parameter
    370          
    371            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL       A,#0x80
   \   00000B   6078         JZ        ??SampleApp_ProcessEvent_0
    372            {
    373              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP      ??SampleApp_ProcessEvent_1
    374              while ( MSGpkt )
    375              {
    376                switch ( MSGpkt->hdr.event )
    377                {
    378                  // Received when a key is pressed
    379                  case KEY_CHANGE:
    380                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    381                    break;
    382          
    383                  // Received when a messages is received (OTA) for this endpoint
    384                  case AF_INCOMING_MSG_CMD:
    385                    SampleApp_MessageMSGCB( MSGpkt );
    386                    break;
    387          
    388                  // Received whenever the device changes state in the network
    389                  case ZDO_STATE_CHANGE:
    390                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC       DPTR
   \   000010   E0           MOVX      A,@DPTR
   \   000011   90....       MOV       DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX      @DPTR,A
    391                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    392                        || (SampleApp_NwkState == DEV_ROUTER)
    393                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL       A,#0x9
   \   000017   600A         JZ        ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX      A,@DPTR
   \   00001A   6407         XRL       A,#0x7
   \   00001C   6005         JZ        ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX      A,@DPTR
   \   00001F   6406         XRL       A,#0x6
   \   000021   7010         JNZ       ??SampleApp_ProcessEvent_4
    394                    {
    395                      // Start sending the periodic message in a regular interval.
    396                      osal_start_timerEx( SampleApp_TaskID,
    397                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    398                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7C88         MOV       R4,#-0x78
   \   000025   7D13         MOV       R5,#0x13
   \   000027   7A01         MOV       R2,#0x1
   \   000029   7B00         MOV       R3,#0x0
   \   00002B   90....       MOV       DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX      A,@DPTR
   \   00002F   F9           MOV       R1,A
   \   000030   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    399                    }
    400                    else
    401                    {
    402                      // Device is no longer in the network
    403                    }
    404                    break;
    405          
    406                  default:
    407                    break;
    408                }
    409          
    410                // Release the memory
    411                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV       R2,?V0
   \   000035   AB..         MOV       R3,?V1
   \   000037   12....       LCALL     `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    412          
    413                // Next - if one is available
    414                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV       DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX      A,@DPTR
   \   00003E   F9           MOV       R1,A
   \   00003F   12....       LCALL     `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000042   8A..         MOV       ?V0,R2
   \   000044   8B..         MOV       ?V1,R3
   \   000046   E5..         MOV       A,?V0
   \   000048   45..         ORL       A,?V1
   \   00004A   6032         JZ        ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV       DPL,?V0
   \   00004F   85..83       MOV       DPH,?V1
   \   000052   E0           MOVX      A,@DPTR
   \   000053   24E6         ADD       A,#-0x1a
   \   000055   601E         JZ        ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD       A,#0x5a
   \   000059   6006         JZ        ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD       A,#-0x11
   \   00005D   60B0         JZ        ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC       DPTR
   \   000062   A3           INC       DPTR
   \   000063   A3           INC       DPTR
   \   000064   E0           MOVX      A,@DPTR
   \   000065   FA           MOV       R2,A
   \   000066   85..82       MOV       DPL,?V0
   \   000069   85..83       MOV       DPH,?V1
   \   00006C   A3           INC       DPTR
   \   00006D   A3           INC       DPTR
   \   00006E   E0           MOVX      A,@DPTR
   \   00006F   F9           MOV       R1,A
   \   000070   12....       LCALL     `??SampleApp_HandleKeys::?relay`; Banked call to: SampleApp_HandleKeys
   \   000073   80BE         SJMP      ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV       R2,?V0
   \   000077   AB..         MOV       R3,?V1
   \   000079   12....       LCALL     `??SampleApp_MessageMSGCB::?relay`; Banked call to: SampleApp_MessageMSGCB
   \   00007C   80B5         SJMP      ??SampleApp_ProcessEvent_4
    415              }
    416              
    417              
    418          
    419              // return unprocessed events
    420              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV       A,R6
   \   00007F   FA           MOV       R2,A
   \   000080   EF           MOV       A,R7
   \   000081   6480         XRL       A,#0x80
   \   000083   8024         SJMP      ??SampleApp_ProcessEvent_8
    421            }
    422          
    423            // Send a message out - This event is generated by a timer
    424            //  (setup in SampleApp_Init()).
    425            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000085   EA           MOV       A,R2
   \   000086   A2E0         MOV       C,0xE0 /* A   */.0
   \   000088   5022         JNC       ??SampleApp_ProcessEvent_9
    426            {
    427              // Send the periodic message
    428              SampleApp_SendPeriodicMessage();
   \   00008A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008A   12....       LCALL     `??SampleApp_SendPeriodicMessage::?relay`; Banked call to: SampleApp_SendPeriodicMessage
    429          
    430              // Setup to send message again in normal period (+ a little jitter)
    431              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    432                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008D                ; Setup parameters for call to function osal_rand
   \   00008D   12....       LCALL     `??osal_rand::?relay`; Banked call to: osal_rand
   \   000090                ; Setup parameters for call to function osal_start_timerEx
   \   000090   EA           MOV       A,R2
   \   000091   2488         ADD       A,#-0x78
   \   000093   FC           MOV       R4,A
   \   000094   E4           CLR       A
   \   000095   3413         ADDC      A,#0x13
   \   000097   FD           MOV       R5,A
   \   000098   7A01         MOV       R2,#0x1
   \   00009A   7B00         MOV       R3,#0x0
   \   00009C   90....       MOV       DPTR,#SampleApp_TaskID
   \   00009F   E0           MOVX      A,@DPTR
   \   0000A0   F9           MOV       R1,A
   \   0000A1   12....       LCALL     `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
    433          
    434              // return unprocessed events
    435              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A4   EE           MOV       A,R6
   \   0000A5   6401         XRL       A,#0x1
   \   0000A7   FA           MOV       R2,A
   \   0000A8   EF           MOV       A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000A9   FB           MOV       R3,A
   \   0000AA   8004         SJMP      ??SampleApp_ProcessEvent_10
    436            }
    437          
    438            // Discard unknown events
    439            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AC   7A00         MOV       R2,#0x0
   \   0000AE   7B00         MOV       R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B0   7F04         MOV       R7,#0x4
   \   0000B2   02....       LJMP      ?BANKED_LEAVE_XDATA
    440          }
    441          
    442          /*********************************************************************
    443           * Event Generation Functions
    444           */
    445          /*********************************************************************
    446           * @fn      SampleApp_HandleKeys
    447           *
    448           * @brief   Handles all key events for this device.
    449           *
    450           * @param   shift - true if in shift/alt.
    451           * @param   keys - bit field for key events. Valid entries:
    452           *                 HAL_KEY_SW_2
    453           *                 HAL_KEY_SW_1
    454           *
    455           * @return  none
    456           */
    457          
    458          typedef struct
    459          {
    460            int16 temperature;
    461            int16 water_level;
    462            int32 flow_rate;
    463            uint8 PH;
    464            uint8 batt_level;
    465            int16 GNSS_latitude;
    466            int16 GNSS_longitude;
    467            
    468            bool sensors_okay;
    469            bool node_okay;
    470            uint8 error_state;
    471            char text[10];
    472          } packet_measurements;
    473          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    474          packet_measurements receiveData = {0,0,0,0,0,0,0,0,0,0,"nothing"};
   \                     receiveData:
   \   000000                DS 27
   \   00001B                REQUIRE `?<Initializer for receiveData>`
   \   00001B                REQUIRE __INIT_XDATA_I
    475          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    476          char serialOut[128] = "";
   \                     serialOut:
   \   000000                DS 128
   \   000080                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    477          char serialBuffer[125] = "";
   \                     serialBuffer:
   \   000000                DS 125
   \   00007D                REQUIRE __INIT_XDATA_Z
    478          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV       A,#-0xb
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
    481          
    482            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV       C,0xE0 /* A   */.0
   \   000009   503F         JNC       ??SampleApp_HandleKeys_0
    483            {
    484              HalLcdWriteStringValue( "Temperature:", receiveData.temperature, 10, HAL_LCD_LINE_1);
   \   00000B                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00000B   75..01       MOV       ?V0,#0x1
   \   00000E   78..         MOV       R0,#?V0
   \   000010   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000013   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000016   7A..         MOV       R2,#`?<Constant "Temperature:">` & 0xff
   \   000018   7B..         MOV       R3,#(`?<Constant "Temperature:">` >> 8) & 0xff
   \   00001A   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00001D   12....       LCALL     ?DEALLOC_XSTACK8
    485              HalLcdWriteStringValue( "Water Level:", receiveData.temperature, 10, HAL_LCD_LINE_2);
   \   000020                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000020   75..02       MOV       ?V0,#0x2
   \   000023   78..         MOV       R0,#?V0
   \   000025   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000028   12....       LCALL     ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00002B   7A..         MOV       R2,#`?<Constant "Water Level:">` & 0xff
   \   00002D   7B..         MOV       R3,#(`?<Constant "Water Level:">` >> 8) & 0xff
   \   00002F   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000032   12....       LCALL     ?DEALLOC_XSTACK8
    486              HalLcdWriteStringValue( "Flow Rate:", receiveData.temperature, 10, HAL_LCD_LINE_3);        
   \   000035                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000035   75..03       MOV       ?V0,#0x3
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003D   12....       LCALL     ?Subroutine3 & 0xFFFF
    487            }
   \                     ??CrossCallReturnLabel_8:
   \   000040   7A..         MOV       R2,#`?<Constant "Flow Rate:">` & 0xff
   \   000042   7B..         MOV       R3,#(`?<Constant "Flow Rate:">` >> 8) & 0xff
   \   000044   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000047   12....       LCALL     ?DEALLOC_XSTACK8
    488          
    489            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   00004A   75....       MOV       ?V0,#`?<Constant "Battery Level:">` & 0xff
   \   00004D   75....       MOV       ?V1,#(`?<Constant "Battery Level:">` >> 8) & 0xff
   \   000050   EE           MOV       A,R6
   \   000051   A2E1         MOV       C,0xE0 /* A   */.1
   \   000053   5043         JNC       ??SampleApp_HandleKeys_1
    490            {
    491              HalLcdWriteStringValue( "pH:", receiveData.PH, 10, HAL_LCD_LINE_1);
   \   000055                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000055   75..01       MOV       ?V2,#0x1
   \   000058   78..         MOV       R0,#?V2
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   790A         MOV       R1,#0xa
   \   00005F   90....       MOV       DPTR,#receiveData + 8
   \   000062   E0           MOVX      A,@DPTR
   \   000063   FC           MOV       R4,A
   \   000064   7D00         MOV       R5,#0x0
   \   000066   7A..         MOV       R2,#`?<Constant "pH:">` & 0xff
   \   000068   7B..         MOV       R3,#(`?<Constant "pH:">` >> 8) & 0xff
   \   00006A   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00006D   12....       LCALL     ?DEALLOC_XSTACK8
    492              HalLcdWriteStringValue( "Battery Level:", receiveData.batt_level, 10, HAL_LCD_LINE_2);
   \   000070                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000070   75..02       MOV       ?V2,#0x2
   \   000073   78..         MOV       R0,#?V2
   \   000075   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000078   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00007B   12....       LCALL     ?DEALLOC_XSTACK8
    493              HalLcdWriteStringValue( "Latitude:", receiveData.GNSS_latitude, 10, HAL_LCD_LINE_3);
   \   00007E                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00007E   75..03       MOV       ?V2,#0x3
   \   000081   78..         MOV       R0,#?V2
   \   000083   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000086   790A         MOV       R1,#0xa
   \   000088   90....       MOV       DPTR,#receiveData + 10
   \   00008B   12....       LCALL     ??Subroutine5_0 & 0xFFFF
    494            }
   \                     ??CrossCallReturnLabel_2:
   \   00008E   7A..         MOV       R2,#`?<Constant "Latitude:">` & 0xff
   \   000090   7B..         MOV       R3,#(`?<Constant "Latitude:">` >> 8) & 0xff
   \   000092   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000095   12....       LCALL     ?DEALLOC_XSTACK8
    495            
    496            if ( keys & HAL_KEY_SW_3 )
   \                     ??SampleApp_HandleKeys_1:
   \   000098   EE           MOV       A,R6
   \   000099   A2E4         MOV       C,0xE0 /* A   */.4
   \   00009B   5031         JNC       ??SampleApp_HandleKeys_2
    497            {
    498              HalLcdWriteStringValue( "Longitude:", receiveData.GNSS_longitude, 10, HAL_LCD_LINE_1);
   \   00009D                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00009D   75..01       MOV       ?V2,#0x1
   \   0000A0   78..         MOV       R0,#?V2
   \   0000A2   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000A5   790A         MOV       R1,#0xa
   \   0000A7   90....       MOV       DPTR,#receiveData + 12
   \   0000AA   12....       LCALL     ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000AD   7A..         MOV       R2,#`?<Constant "Longitude:">` & 0xff
   \   0000AF   7B..         MOV       R3,#(`?<Constant "Longitude:">` >> 8) & 0xff
   \   0000B1   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000B4   12....       LCALL     ?DEALLOC_XSTACK8
    499              HalLcdWriteStringValue( "Battery Level:", receiveData.batt_level, 10, HAL_LCD_LINE_2);
   \   0000B7                ; Setup parameters for call to function HalLcdWriteStringValue
   \   0000B7   75..02       MOV       ?V2,#0x2
   \   0000BA   78..         MOV       R0,#?V2
   \   0000BC   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   0000BF   12....       LCALL     ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000C2   12....       LCALL     ?DEALLOC_XSTACK8
    500              HalLcdWriteString( receiveData.text, HAL_LCD_LINE_3);
   \   0000C5                ; Setup parameters for call to function HalLcdWriteString
   \   0000C5   7903         MOV       R1,#0x3
   \   0000C7   7A..         MOV       R2,#(receiveData + 17) & 0xff
   \   0000C9   7B..         MOV       R3,#((receiveData + 17) >> 8) & 0xff
   \   0000CB   12....       LCALL     `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    501            }
    502            
    503            if ( keys & HAL_KEY_SW_4 )
   \                     ??SampleApp_HandleKeys_2:
   \   0000CE   EE           MOV       A,R6
   \   0000CF   A2E3         MOV       C,0xE0 /* A   */.3
   \   0000D1   506A         JNC       ??SampleApp_HandleKeys_3
    504            {
    505           //   HalLcdWriteStringValue( "SensorStat:", receiveData.sensors_okay, 10, HAL_LCD_LINE_1);
    506           //   HalLcdWriteStringValue( "NodeStat:", receiveData.node_okay, 10, HAL_LCD_LINE_2);
    507                
    508                //sprintf(serialOut,"temperature:%d\n",receiveData.temperature);
    509                  int serialSize;
    510                  /*
    511                  sprintf(serialBuffer,
    512             ",temperature:%d:\n,water_level:%d:\n,flow_rate:%d:\n,PH:%d:\n,batt_level:%d:\n,GNSS_latitude:%d:\n,GNSS_longitude:%d:\n,sensors_okay:%d:\n,error_state:%d:\n,node_okay:1:\n",
    513                            receiveData.temperature, //1
    514                            receiveData.water_level, //2
    515                            receiveData.flow_rate, //3
    516                            receiveData.PH, //4
    517                            receiveData.batt_level, //5
    518                            receiveData.GNSS_latitude, //6
    519                            receiveData.GNSS_longitude, //7
    520                            receiveData.sensors_okay, //8
    521                            receiveData.error_state); //9
    522                  serialSize = sizeof(serialBuffer);
    523                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize); 
    524                  */
    525                
    526                  /*
    527                  sprintf(serialBuffer,",temperature:%d:\n,water_level:%d:\n",
    528                          receiveData.temperature,
    529                          receiveData.water_level);
    530                  serialSize = sizeof(serialBuffer);
    531                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    532                  */
    533                  
    534                  /*
    535                  sprintf(serialBuffer,
    536                  ",t:%d:\n,w:%d:\n,f:%d:\n,PH:%d:\n,b:%d:\n,GNSS_latitude:%d:\n,GNSS_longitude:%d:\n,s:%d:\n,e:%d:\n,n:1:\n",
    537                            receiveData.temperature, //1
    538                            receiveData.water_level, //2
    539                            receiveData.flow_rate, //3
    540                            receiveData.PH, //4
    541                            receiveData.batt_level, //5
    542                            receiveData.GNSS_latitude, //6
    543                            receiveData.GNSS_longitude, //7
    544                            receiveData.sensors_okay, //8
    545                            receiveData.error_state); //9
    546                  serialSize = sizeof(serialBuffer);
    547                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    548                  */
    549                  
    550                  sprintf(serialBuffer,
    551                  ",temp:%d:\n,water:%d:\n,flow:%d:\n,PH:%d:\n,batt:%d:\n,lat:%d:\n,long:%d:\n,sensOkay:%d:\n,err:%d:\n,ok:1:\n",
    552                            receiveData.temperature, //1
    553                            receiveData.water_level, //2
    554                            receiveData.flow_rate, //3
                                   ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
    555                            receiveData.PH, //4
    556                            receiveData.batt_level, //5
    557                            receiveData.GNSS_latitude, //6
    558                            receiveData.GNSS_longitude, //7
    559                            receiveData.sensors_okay, //8
    560                            receiveData.error_state); //9
   \   0000D3                ; Setup parameters for call to function sprintf
   \   0000D3   90....       MOV       DPTR,#receiveData + 16
   \   0000D6   E0           MOVX      A,@DPTR
   \   0000D7   F5..         MOV       ?V0,A
   \   0000D9   75..00       MOV       ?V1,#0x0
   \   0000DC   78..         MOV       R0,#?V0
   \   0000DE   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000E1   90....       MOV       DPTR,#receiveData + 14
   \   0000E4   E0           MOVX      A,@DPTR
   \   0000E5   F5..         MOV       ?V0,A
   \   0000E7   78..         MOV       R0,#?V0
   \   0000E9   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   0000EC   90....       MOV       DPTR,#receiveData + 12
   \   0000EF   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000F2   90....       MOV       DPTR,#receiveData + 10
   \   0000F5   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   0000F8   90....       MOV       DPTR,#receiveData + 9
   \   0000FB   E0           MOVX      A,@DPTR
   \   0000FC   F5..         MOV       ?V0,A
   \   0000FE   78..         MOV       R0,#?V0
   \   000100   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000103   90....       MOV       DPTR,#receiveData + 8
   \   000106   E0           MOVX      A,@DPTR
   \   000107   F5..         MOV       ?V0,A
   \   000109   78..         MOV       R0,#?V0
   \   00010B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00010E   90....       MOV       DPTR,#receiveData + 4
   \   000111   12....       LCALL     ?PUSH_XSTACK8_X_FOUR
   \   000114   90....       MOV       DPTR,#receiveData + 2
   \   000117   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   00011A   90....       MOV       DPTR,#receiveData
   \   00011D   12....       LCALL     ?PUSH_XSTACK8_X_TWO
   \   000120   7C..         MOV       R4,#`?<Constant ",temp:%d:\\n,water:%d:\\n...">` & 0xff
   \   000122   7D..         MOV       R5,#(`?<Constant ",temp:%d:\\n,water:%d:\\n...">` >> 8) & 0xff
   \   000124   7A..         MOV       R2,#serialBuffer & 0xff
   \   000126   7B..         MOV       R3,#(serialBuffer >> 8) & 0xff
   \   000128   12....       LCALL     `??sprintf::?relay`; Banked call to: sprintf
   \   00012B   7414         MOV       A,#0x14
   \   00012D   12....       LCALL     ?DEALLOC_XSTACK8
    561                  serialSize = sizeof(serialBuffer);
    562                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8 *"
   \   000130                ; Setup parameters for call to function HalUARTWrite
   \   000130   7C7D         MOV       R4,#0x7d
   \   000132   7D00         MOV       R5,#0x0
   \   000134   7A..         MOV       R2,#serialBuffer & 0xff
   \   000136   7B..         MOV       R3,#(serialBuffer >> 8) & 0xff
   \   000138   7900         MOV       R1,#0x0
   \   00013A   12....       LCALL     `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
    563                  
    564                  /*
    565                  sprintf(serialBuffer,",temperature:%d:\n",receiveData.temperature);
    566                  serialSize = sizeof(serialBuffer);
    567                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    568           
    569                  sprintf(serialBuffer,",water_level:%d:\n",receiveData.water_level);
    570                  serialSize = sizeof(serialBuffer);
    571                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    572                  
    573                  sprintf(serialBuffer,",flow_rate:%d:\n",receiveData.flow_rate);
    574                  serialSize = sizeof(serialBuffer);
    575                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    576                  
    577                  sprintf(serialBuffer,",PH:%d:\n",receiveData.PH);
    578                  serialSize = sizeof(serialBuffer);
    579                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    580                  
    581                  sprintf(serialBuffer,",batt_level:%d:\n",receiveData.batt_level);
    582                  serialSize = sizeof(serialBuffer);
    583                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    584           
    585                  sprintf(serialBuffer,",GNSS_latitude:%d:\n",receiveData.GNSS_latitude);
    586                  serialSize = sizeof(serialBuffer);
    587                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    588          */
    589          
    590                  /*
    591                  sprintf(serialBuffer,",temperature:%d:\n",receiveData.temperature);
    592                  serialSize = sizeof(serialBuffer);
    593                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    594           
    595                  sprintf(serialBuffer,",water_level:%d:\n",receiveData.water_level);
    596                  serialSize = sizeof(serialBuffer);
    597                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    598                  
    599                  sprintf(serialBuffer,",flow_rate:%d:\n",receiveData.flow_rate);
    600                  serialSize = sizeof(serialBuffer);
    601                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    602                  
    603                  sprintf(serialBuffer,",PH:%d:\n",receiveData.PH);
    604                  serialSize = sizeof(serialBuffer);
    605                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    606                 
    607                  // HalLedBlink(HAL_LED_2,4,50,1000);
    608                  
    609                  sprintf(serialBuffer,",batt_level:%d:\n",receiveData.batt_level);
    610                  serialSize = sizeof(serialBuffer);
    611                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    612           
    613                  sprintf(serialBuffer,",GNSS_latitude:%d:\n",receiveData.GNSS_latitude);
    614                  serialSize = sizeof(serialBuffer);
    615                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    616           
    617                  sprintf(serialBuffer,",GNSS_longitude:%d:\n",receiveData.GNSS_longitude);
    618                  serialSize = sizeof(serialBuffer);
    619                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize); 
    620                  
    621                  sprintf(serialBuffer,",sensors_okay:%d:\n",receiveData.sensors_okay);
    622                  serialSize = sizeof(serialBuffer);
    623                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    624           
    625                  sprintf(serialBuffer,",error_state:%d:\n",receiveData.error_state);
    626                  serialSize = sizeof(serialBuffer);
    627                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    628                  
    629                  strcpy(serialBuffer,",node_okay:1:\n");
    630                  serialSize = sizeof(serialBuffer);
    631                  HalUARTWrite(SAMPLE_APP_PORT, serialBuffer, serialSize);
    632                  
    633                  */
    634                  /*
    635                  sprintf(serialBuffer,",sensors_okay:%d,",receiveData.sensors_okay);
    636                  strcat(serialOut,serialBuffer);
    637                  HalUARTWrite(SAMPLE_APP_PORT, serialOut, serialSize);
    638                  */
    639                  /*
    640                  sprintf(serialBuffer,",error_state:%d,",receiveData.error_state);
    641                  strcat(serialOut,serialBuffer2);
    642                  HalUARTWrite(SAMPLE_APP_PORT, serialOut, serialSize);
    643                  
    644                  strcat(serialOut,",node_okay:1:\n,");
    645                  HalUARTWrite(SAMPLE_APP_PORT, serialOut, serialSize);
    646                  
    647                  serialSize = sizeof(serialOut);
    648                  HalUARTWrite(SAMPLE_APP_PORT, serialOut, serialSize);
    649          */
    650                  
    651            }
    652          }
   \                     ??SampleApp_HandleKeys_3:
   \   00013D   02....       LJMP      ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   790A         MOV       R1,#0xa
   \   000002   90....       MOV       DPTR,#receiveData
   \   000005                REQUIRE ??Subroutine5_0
   \   000005                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   E0           MOVX      A,@DPTR
   \   000001   FC           MOV       R4,A
   \   000002   A3           INC       DPTR
   \   000003   E0           MOVX      A,@DPTR
   \   000004   FD           MOV       R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   790A         MOV       R1,#0xa
   \   000002   90....       MOV       DPTR,#receiveData + 9
   \   000005   E0           MOVX      A,@DPTR
   \   000006   FC           MOV       R4,A
   \   000007   7D00         MOV       R5,#0x0
   \   000009   AA..         MOV       R2,?V0
   \   00000B   AB..         MOV       R3,?V1
   \   00000D                REQUIRE ??Subroutine6_0
   \   00000D                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL     `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   000003   7401         MOV       A,#0x1
   \   000005   22           RET
    653          
    654          /*********************************************************************
    655           * LOCAL FUNCTIONS
    656           */
    657          
    658          /*********************************************************************
    659           * @fn      SampleApp_MessageMSGCB
    660           *
    661           * @brief   Data message processor callback.  This function processes
    662           *          any incoming data - probably from other devices.  So, based
    663           *          on cluster ID, perform the intended action.
    664           *
    665           * @param   none
    666           *
    667           * @return  none
    668            */
    669          /*
    670          typedef struct
    671          {
    672            int16 temperature;
    673            int16 water_level;
    674            int32 flow_rate;
    675            uint8 PH;
    676            uint8 batt_level;
    677            int16 GNSS_latitude;
    678            int16 GNSS_longitude;
    679            
    680            bool sensors_okay;
    681            bool node_okay;
    682            uint8 error_state;
    683          } packet_measurements;
    684          
    685          packet_measurements receiveData;
    686          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    687          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    688          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV       A,R2
   \   000006   FE           MOV       R6,A
   \   000007   EB           MOV       A,R3
   \   000008   FF           MOV       R7,A
    689            int dataSize; //Data size of received packet
    690            
    691            switch ( pkt->clusterId )
   \   000009   8A82         MOV       DPL,R2
   \   00000B   F583         MOV       DPH,A
   \   00000D   A3           INC       DPTR
   \   00000E   A3           INC       DPTR
   \   00000F   A3           INC       DPTR
   \   000010   A3           INC       DPTR
   \   000011   E0           MOVX      A,@DPTR
   \   000012   6403         XRL       A,#0x3
   \   000014   7002         JNZ       ??SampleApp_MessageMSGCB_0
   \   000016   A3           INC       DPTR
   \   000017   E0           MOVX      A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000018   7068         JNZ       ??SampleApp_MessageMSGCB_1
    692            {
    693              case SAMPLEAPP_PERIODIC_CLUSTERID:
    694                break;
    695                
    696              case SAMPLEAPP_CLUSTERID1:
    697                dataSize = sizeof(packet_measurements);
    698                HalLcdWriteStringValue("Data Size:", dataSize, 10,HAL_LCD_LINE_1);
   \   00001A                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00001A   75..01       MOV       ?V0,#0x1
   \   00001D   78..         MOV       R0,#?V0
   \   00001F   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000022   790A         MOV       R1,#0xa
   \   000024   7C1B         MOV       R4,#0x1b
   \   000026   7D00         MOV       R5,#0x0
   \   000028   7A..         MOV       R2,#`?<Constant "Data Size:">` & 0xff
   \   00002A   7B..         MOV       R3,#(`?<Constant "Data Size:">` >> 8) & 0xff
   \   00002C   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00002F   12....       LCALL     ?DEALLOC_XSTACK8
    699                memcpy(&receiveData,pkt->cmd.Data,dataSize);
   \   000032                ; Setup parameters for call to function memcpy
   \   000032   75..1B       MOV       ?V0,#0x1b
   \   000035   75..00       MOV       ?V1,#0x0
   \   000038   78..         MOV       R0,#?V0
   \   00003A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003D   EE           MOV       A,R6
   \   00003E   2421         ADD       A,#0x21
   \   000040   F582         MOV       DPL,A
   \   000042   E4           CLR       A
   \   000043   3F           ADDC      A,R7
   \   000044   F583         MOV       DPH,A
   \   000046   12....       LCALL     ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000049   7A..         MOV       R2,#receiveData & 0xff
   \   00004B   7B..         MOV       R3,#(receiveData >> 8) & 0xff
   \   00004D   12....       LCALL     `??memcpy::?relay`; Banked call to: memcpy
   \   000050   7402         MOV       A,#0x2
   \   000052   12....       LCALL     ?DEALLOC_XSTACK8
    700                //HalLcdWriteStringValue("Data:", receiveData.testData2, 10, HAL_LCD_LINE_2);
    701                //HalLcdWriteStringValue("Byte: ", pkt->cmd.Data[4], 10,HAL_LCD_LINE_3);
    702                
    703                //char ptr[5] = {pkt->cmd.Data[4], pkt->cmd.Data[5], pkt->cmd.Data[6], pkt->cmd.Data[7], pkt->cmd.Data[8]};
    704                
    705                /*
    706                HalLcdWriteString((char*)pkt->cmd.Data[4],HAL_LCD_LINE_1);
    707           
    708                HalLcdWriteString((char*)pkt->cmd.Data[5],HAL_LCD_LINE_2);
    709                
    710                HalLcdWriteString((char*)pkt->cmd.Data[7],HAL_LCD_LINE_3);
    711                */ 
    712                
    713                HalLcdWriteStringValue("Byte: ", pkt->cmd.DataLength, 10,HAL_LCD_LINE_3);
   \   000055                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000055   75..03       MOV       ?V0,#0x3
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00005D   790A         MOV       R1,#0xa
   \   00005F   EE           MOV       A,R6
   \   000060   241F         ADD       A,#0x1f
   \   000062   F582         MOV       DPL,A
   \   000064   E4           CLR       A
   \   000065   3F           ADDC      A,R7
   \   000066   F583         MOV       DPH,A
   \   000068   12....       LCALL     ??Subroutine5_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00006B   7A..         MOV       R2,#`?<Constant "Byte: ">` & 0xff
   \   00006D   7B..         MOV       R3,#(`?<Constant "Byte: ">` >> 8) & 0xff
   \   00006F   12....       LCALL     ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000072   12....       LCALL     ?DEALLOC_XSTACK8
    714                HalLedBlink(HAL_LED_1,4,50,1000);
   \   000075                ; Setup parameters for call to function HalLedBlink
   \   000075   7CE8         MOV       R4,#-0x18
   \   000077   7D03         MOV       R5,#0x3
   \   000079   7B32         MOV       R3,#0x32
   \   00007B   7A04         MOV       R2,#0x4
   \   00007D   7901         MOV       R1,#0x1
   \   00007F   12....       LCALL     `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    715                
    716                break;
    717          
    718              case SAMPLEAPP_FLASH_CLUSTERID:
    719                break;
    720            }
    721          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000082   02....       LJMP      ??Subroutine7_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F02         MOV       R7,#0x2
   \   000002   02....       LJMP      ?BANKED_LEAVE_XDATA
    722          
    723          /*********************************************************************
    724           * @fn      SampleApp_SendPeriodicMessage
    725           *
    726           * @brief   Send the periodic message.
    727           *
    728           * @param   none
    729           *
    730           * @return  none
    731           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    732          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    733          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    734            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    735                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    736                                 1,
    737                                 (uint8*)&SampleAppPeriodicCounter,
    738                                 &SampleApp_TransID,
    739                                 AF_DISCV_ROUTE,
    740                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV       ?V0,#0x1e
   \   000008   78..         MOV       R0,#?V0
   \   00000A   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV       R0,#?V0
   \   000015   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV       ?V0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV       ?V1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV       R0,#?V0
   \   000020   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV       ?V0,#0x1
   \   000026   75..00       MOV       ?V1,#0x0
   \   000029   78..         MOV       R0,#?V0
   \   00002B   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV       R0,#?V0
   \   000030   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV       R1,#0x20
   \   000035   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV       R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV       R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000040   7409         MOV       A,#0x9
   \   000042   02....       LJMP      ?Subroutine1 & 0xFFFF
    741            {
    742            }
    743            else
    744            {
    745              // Error occurred in request to send.
    746            }
    747          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL     ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0
    748          
    749          /*********************************************************************
    750           * @fn      SampleApp_SendFlashMessage
    751           *
    752           * @brief   Send the flash message to group 1.
    753           *
    754           * @param   flashTime - in milliseconds
    755           *
    756           * @return  none
    757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    758          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    759          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV       A,#-0x3
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
    760            uint8 buffer[3];
    761            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV       DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX      A,@DPTR
   \   00000E   85..82       MOV       DPL,?XSP + 0
   \   000011   85..83       MOV       DPH,?XSP + 1
   \   000014   F0           MOVX      @DPTR,A
   \   000015   90....       MOV       DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX      A,@DPTR
   \   000019   04           INC       A
   \   00001A   F0           MOVX      @DPTR,A
    762            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV       A,#0x1
   \   00001D   12....       LCALL     ?XSTACK_DISP0_8
   \   000020   EA           MOV       A,R2
   \   000021   F0           MOVX      @DPTR,A
    763            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV       A,#0x2
   \   000024   12....       LCALL     ?XSTACK_DISP0_8
   \   000027   EB           MOV       A,R3
   \   000028   F0           MOVX      @DPTR,A
    764          
    765            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    766                                 SAMPLEAPP_FLASH_CLUSTERID,
    767                                 3,
    768                                 buffer,
    769                                 &SampleApp_TransID,
    770                                 AF_DISCV_ROUTE,
    771                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV       ?V0,#0x1e
   \   00002C   78..         MOV       R0,#?V0
   \   00002E   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV       ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV       ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV       R0,#?V0
   \   000039   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV       A,#0x3
   \   00003E   12....       LCALL     ?XSTACK_DISP100_8
   \   000041   88..         MOV       ?V0,R0
   \   000043   89..         MOV       ?V1,R1
   \   000045   78..         MOV       R0,#?V0
   \   000047   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV       ?V0,#0x3
   \   00004D   75..00       MOV       ?V1,#0x0
   \   000050   78..         MOV       R0,#?V0
   \   000052   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV       ?V0,#0x2
   \   000058   78..         MOV       R0,#?V0
   \   00005A   12....       LCALL     ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV       R1,#0x20
   \   00005F   7C..         MOV       R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV       R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV       R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV       R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL     `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006A   7409         MOV       A,#0x9
   \   00006C   12....       LCALL     ?DEALLOC_XSTACK8
    772            {
    773            }
    774            else
    775            {
    776              // Error occurred in request to send.
    777            }
    778          }
   \   00006F   7403         MOV       A,#0x3
   \   000071   80..         SJMP      ?Subroutine1
    779          
    780          /*********************************************************************
    781          *********************************************************************/
    782          
    783          /*********************************************************************
    784           * @fn      SampleApp_CallBack
    785           *
    786           * @brief   Send data OTA.
    787           *
    788           * @param   port - UART port.
    789           * @param   event - the UART port event flag.
    790           *
    791           * @return  none
    792           */
    793          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    794          static void SampleApp_CallBack(uint8 port, uint8 event)
   \                     SampleApp_CallBack:
    795          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV       A,#-0xa
   \   000002   12....       LCALL     ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 81
   \   000005   74AF         MOV       A,#-0x51
   \   000007   12....       LCALL     ?ALLOC_XSTACK8
   \   00000A   EA           MOV       A,R2
   \   00000B   FE           MOV       R6,A
    796            (void)port;
    797            uint8 localBuf[81];
    798            uint16 receivedUARTLen;
    799          
    800            /*
    801            if((event & (HAL_UART_TX_FULL | HAL_UART_TX_ABOUT_FULL))
    802            {}
    803            */
    804            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    805          #if SERIAL_APP_LOOPBACK
    806                (SampleApp_TxLen < SERIAL_APP_TX_MAX))
    807          #else
    808                !SampleApp_TxLen)
   \   00000C   7407         MOV       A,#0x7
   \   00000E   5E           ANL       A,R6
   \   00000F   603B         JZ        ??SampleApp_CallBack_0
   \   000011   90....       MOV       DPTR,#SampleApp_TxLen
   \   000014   E0           MOVX      A,@DPTR
   \   000015   7035         JNZ       ??SampleApp_CallBack_0
    809          #endif
    810            {
    811              // buffer needed to be emptied for the new liner
    812              for(int i = 0; i < 81; i++){
    813                localBuf[i] = 0;
   \   000017   E4           CLR       A
   \   000018   85..82       MOV       DPL,?XSP + 0
   \   00001B   85..83       MOV       DPH,?XSP + 1
   \   00001E   7851         MOV       R0,#0x51
   \                     ??SampleApp_CallBack_1:
   \   000020   F0           MOVX      @DPTR,A
   \   000021   A3           INC       DPTR
   \   000022   D8FC         DJNZ      R0,??SampleApp_CallBack_1
    814              }   
    815              receivedUARTLen= HalUARTRead(SAMPLE_APP_PORT, localBuf, SAMPLE_APP_TX_MAX);
   \   000024                ; Setup parameters for call to function HalUARTRead
   \   000024   7C80         MOV       R4,#-0x80
   \   000026   FD           MOV       R5,A
   \   000027   AA..         MOV       R2,?XSP + 0
   \   000029   AB..         MOV       R3,?XSP + 1
   \   00002B   F9           MOV       R1,A
   \   00002C   12....       LCALL     `??HalUARTRead::?relay`; Banked call to: HalUARTRead
   \   00002F   8A..         MOV       ?V0,R2
   \   000031   8B..         MOV       ?V1,R3
   \   000033   AC..         MOV       R4,?V0
   \   000035   AD..         MOV       R5,?V1
    816              HalLcdWriteStringValue( localBuf,  receivedUARTLen, 16, HAL_LCD_LINE_3 ); 
                                             ^
Warning[Pe167]: argument of type "uint8 *" is incompatible with parameter of
          type "char *"

  static afAddrType_t SampleApp_TxAddr;
                      ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",224  Warning[Pe177]: 
          variable "SampleApp_TxAddr" was declared but never referenced

  static uint8 SampleApp_TxSeq;
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",225  Warning[Pe177]: 
          variable "SampleApp_TxSeq" was declared but never referenced

  static uint8 SampleApp_TxBuf[SAMPLE_APP_TX_MAX+1];
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",226  Warning[Pe177]: 
          variable "SampleApp_TxBuf" was declared but never referenced

  static afAddrType_t SampleApp_RxAddr;
                      ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",229  Warning[Pe177]: 
          variable "SampleApp_RxAddr" was declared but never referenced

  static uint8 SampleApp_RxSeq;
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",230  Warning[Pe550]: 
          variable "SampleApp_RxSeq" was set but never used

  static uint8 SampleApp_RspBuf[SAMPLE_APP_RSP_CNT];
               ^
"C:\Users\Re\Documents\ZStack\ZStack-CC2530-2.3.1\Projects\zstack\Samples\SampleApp\Source\Coordinator.c",231  Warning[Pe177]: 
          variable "SampleApp_RspBuf" was declared but never referenced
   \   000037                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000037   75..03       MOV       ?V0,#0x3
   \   00003A   78..         MOV       R0,#?V0
   \   00003C   12....       LCALL     ?PUSH_XSTACK_I_ONE
   \   00003F   7910         MOV       R1,#0x10
   \   000041   7401         MOV       A,#0x1
   \   000043   12....       LCALL     ?XSTACK_DISP101_8
   \   000046   12....       LCALL     ??Subroutine6_0 & 0xFFFF
    817              
    818              
    819              //HalUARTWrite(SAMPLE_APP_PORT, *localBuf, 81);
    820              //SampleApp_Send();
    821            }
   \                     ??CrossCallReturnLabel_19:
   \   000049   12....       LCALL     ?DEALLOC_XSTACK8
    822          }
   \                     ??SampleApp_CallBack_0:
   \   00004C   7451         MOV       A,#0x51
   \   00004E                REQUIRE ?Subroutine1
   \   00004E                ; // Fall through to label ?Subroutine1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for receiveData>`:
   \   000000   0000         DW 0
   \   000002   0000         DW 0
   \   000004   00000000     DD 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   6E6F7468     DB "nothing"
   \            696E6700
   \   000019   0000         DB 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_MessageMSGCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendPeriodicMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_SendFlashMessage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SampleApp_CallBack::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_CallBack

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SerialApp+Labs">`:
   \   000000   53657269     DB "SerialApp+Labs"
   \            616C4170
   \            702B4C61
   \            627300  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Temperature:">`:
   \   000000   54656D70     DB "Temperature:"
   \            65726174
   \            7572653A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Water Level:">`:
   \   000000   57617465     DB "Water Level:"
   \            72204C65
   \            76656C3A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Flow Rate:">`:
   \   000000   466C6F77     DB "Flow Rate:"
   \            20526174
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "pH:">`:
   \   000000   70483A00     DB "pH:"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Battery Level:">`:
   \   000000   42617474     DB "Battery Level:"
   \            65727920
   \            4C657665
   \            6C3A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Latitude:">`:
   \   000000   4C617469     DB "Latitude:"
   \            74756465
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Longitude:">`:
   \   000000   4C6F6E67     DB "Longitude:"
   \            69747564
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",temp:%d:\\n,water:%d:\\n...">`:
   \   000000   2C74656D     DB 2CH, 74H, 65H, 6DH, 70H, 3AH, 25H, 64H
   \            703A2564
   \   000008   3A0A2C77     DB 3AH, 0AH, 2CH, 77H, 61H, 74H, 65H, 72H
   \            61746572
   \   000010   3A25643A     DB 3AH, 25H, 64H, 3AH, 0AH, 2CH, 66H, 6CH
   \            0A2C666C
   \   000018   6F773A25     DB 6FH, 77H, 3AH, 25H, 64H, 3AH, 0AH, 2CH
   \            643A0A2C
   \   000020   50483A25     DB 50H, 48H, 3AH, 25H, 64H, 3AH, 0AH, 2CH
   \            643A0A2C
   \   000028   62617474     DB 62H, 61H, 74H, 74H, 3AH, 25H, 64H, 3AH
   \            3A25643A
   \   000030   0A2C6C61     DB 0AH, 2CH, 6CH, 61H, 74H, 3AH, 25H, 64H
   \            743A2564
   \   000038   3A0A2C6C     DB 3AH, 0AH, 2CH, 6CH, 6FH, 6EH, 67H, 3AH
   \            6F6E673A
   \   000040   25643A0A     DB 25H, 64H, 3AH, 0AH, 2CH, 73H, 65H, 6EH
   \            2C73656E
   \   000048   734F6B61     DB 73H, 4FH, 6BH, 61H, 79H, 3AH, 25H, 64H
   \            793A2564
   \   000050   3A0A2C65     DB 3AH, 0AH, 2CH, 65H, 72H, 72H, 3AH, 25H
   \            72723A25
   \   000058   643A0A2C     DB 64H, 3AH, 0AH, 2CH, 6FH, 6BH, 3AH, 31H
   \            6F6B3A31
   \   000060   3A0A00       DB 3AH, 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Data Size:">`:
   \   000000   44617461     DB "Data Size:"
   \            2053697A
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Byte: ">`:
   \   000000   42797465     DB "Byte: "
   \            3A2000  
    823          
    824          
    825          /*********************************************************************
    826          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     92   SampleApp_CallBack
        0     92   -> HalLcdWriteStringValue
        0     91   -> HalUARTRead
      0     43   SampleApp_HandleKeys
        0     11   -> HalLcdWriteString
        0     12   -> HalLcdWriteStringValue
        0     11   -> HalUARTWrite
        0     31   -> sprintf
      0     43   SampleApp_Init
        0     40   -> HalLcdWriteString
        0     40   -> HalUARTOpen
        0     40   -> RegisterForKeys
        0     40   -> afRegister
        0     40   -> aps_AddGroup
        0     43   -> osal_memcpy
      0     24   SampleApp_MessageMSGCB
        0     11   -> HalLcdWriteStringValue
        0     10   -> HalLedBlink
        0     12   -> memcpy
      0     12   SampleApp_ProcessEvent
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     12   -> osal_start_timerEx
      1     22   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     31   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      99  ?<Constant ",temp:%d:\n,water:%d:\n...">
      15  ?<Constant "Battery Level:">
       7  ?<Constant "Byte: ">
      11  ?<Constant "Data Size:">
      11  ?<Constant "Flow Rate:">
       8  ?<Constant "Group 1">
      10  ?<Constant "Latitude:">
      11  ?<Constant "Longitude:">
      15  ?<Constant "SerialApp+Labs">
      13  ?<Constant "Temperature:">
      13  ?<Constant "Water Level:">
       4  ?<Constant "pH:">
      27  ?<Initializer for receiveData>
       6  ??Subroutine5_0
       6  ??Subroutine6_0
       5  ??Subroutine7_0
       5  ?Subroutine0
       3  ?Subroutine1
      13  ?Subroutine2
       5  ?Subroutine3
       9  ?Subroutine4
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
      12  SampleApp_Broadcast
      78  SampleApp_CallBack
       6  SampleApp_CallBack::?relay
      12  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
     320  SampleApp_HandleKeys
       6  SampleApp_HandleKeys::?relay
     289  SampleApp_Init
       6  SampleApp_Init::?relay
     133  SampleApp_MessageMSGCB
       6  SampleApp_MessageMSGCB::?relay
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     181  SampleApp_ProcessEvent
       6  SampleApp_ProcessEvent::?relay
       1  SampleApp_RxSeq
     115  SampleApp_SendFlashMessage
       6  SampleApp_SendFlashMessage::?relay
      69  SampleApp_SendPeriodicMessage
       6  SampleApp_SendPeriodicMessage::?relay
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       1  SampleApp_TxLen
       6  SampleApp_epDesc
       1  SerialApp_TaskID
       6  SerialApp_epDesc
      27  receiveData
     125  serialBuffer
     128  serialOut

 
 1 237 bytes in segment BANKED_CODE
    42 bytes in segment BANK_RELAYS
    27 bytes in segment XDATA_I
    27 bytes in segment XDATA_ID
   247 bytes in segment XDATA_ROM_C
   321 bytes in segment XDATA_Z
 
    69 bytes of CODE     memory
   247 bytes of CONST    memory
 1 237 bytes of HUGECODE memory
   348 bytes of XDATA    memory

Errors: none
Warnings: 10
